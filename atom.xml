<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJ小窝</title>
  
  <subtitle>勤总结、勤记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-19T05:51:18.225Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.4 最短路径</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/4.4%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/第4章图/4.4 最短路径/</id>
    <published>2019-07-19T04:07:12.000Z</published>
    <updated>2019-07-19T05:51:18.225Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://algs4.cs.princeton.edu/code/javadoc/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;算法4 官网地址&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
      <category term="第4章图" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>4.3 最小生成树</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/4.3%20%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/第4章图/4.3 最小生成树/</id>
    <published>2019-07-19T04:07:12.000Z</published>
    <updated>2019-07-19T05:51:33.109Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://algs4.cs.princeton.edu/code/javadoc/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;算法4 官网地址&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
      <category term="第4章图" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>4.2 有向图</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/4.2%20%E6%9C%89%E5%90%91%E5%9B%BE/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/第4章图/4.2 有向图/</id>
    <published>2019-07-19T04:07:12.000Z</published>
    <updated>2019-07-23T01:26:35.230Z</updated>
    
    <content type="html"><![CDATA[<p>有向图学习记录</p><a id="more"></a><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>有向图： 一幅有方向性的图是由一组顶点和一组有方向的边组成，每条有方向的边都连接着有序的一对顶点。</p><p>出度： 顶点指出的边的总数</p><p>入度： 指向该顶点的边的总数</p><p>有向环： 一条至少含有一条边，且起点和终点相同的有向路径</p><p>可达性： 存在v到w的路径时，我们称顶点w能够由顶点v到达</p><h2 id="有向图数据类型"><a href="#有向图数据类型" class="headerlink" title="有向图数据类型"></a>有向图数据类型</h2><p>有向图实现代码</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Digraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _vertex: <span class="keyword">Int</span> <span class="comment">//顶点个数</span></span><br><span class="line">    <span class="keyword">var</span> _edges: <span class="keyword">Int</span> = <span class="number">0</span>  <span class="comment">//边数</span></span><br><span class="line">    <span class="keyword">var</span> _adj:[[<span class="keyword">Int</span>]] <span class="comment">//邻接表二维数组</span></span><br><span class="line">    init(v: <span class="keyword">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>._vertex = v</span><br><span class="line">        <span class="keyword">self</span>._adj = [[<span class="keyword">Int</span>]](repeating: [<span class="keyword">Int</span>](), count: v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func v() -&gt; <span class="keyword">Int</span> &#123;  <span class="comment">//返回顶点的个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._vertex</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func e() -&gt; <span class="keyword">Int</span> &#123;  <span class="comment">//返回边的个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._edges</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func addEdge(_ v: <span class="keyword">Int</span>, _ w:<span class="keyword">Int</span> )  &#123;  <span class="comment">//添加v-&gt;w的边</span></span><br><span class="line">        <span class="keyword">self</span>._adj[v].insert(w, at: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">self</span>._edges += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func adj(_ v: <span class="keyword">Int</span>) -&gt; [<span class="keyword">Int</span>] &#123;  <span class="comment">//返回顶点v的邻接表</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._adj[v]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func reverse() -&gt; Digraph &#123;</span><br><span class="line">        <span class="keyword">let</span> r = Digraph(v: <span class="keyword">self</span>.v())</span><br><span class="line">        <span class="keyword">for</span> v in <span class="number">0.</span>.&lt;<span class="keyword">self</span>.v() &#123;</span><br><span class="line">            <span class="keyword">for</span> w in <span class="keyword">self</span>.adj(v)  &#123;</span><br><span class="line">                r.addEdge(v, w)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func toString() -&gt; String &#123;</span><br><span class="line">        <span class="keyword">var</span> result: String  =</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        \(self.v()) vertixes \(self.e()) edges \n</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="number">0.</span>.&lt;<span class="keyword">self</span>.v() &#123;</span><br><span class="line">            result += <span class="string">"\(i) :"</span></span><br><span class="line">            <span class="keyword">for</span> w in <span class="keyword">self</span>.adj(i) &#123;</span><br><span class="line">                result += <span class="string">"\(w) "</span></span><br><span class="line">            &#125;</span><br><span class="line">            result +=</span><br><span class="line">            <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">            \n</span></span><br><span class="line"><span class="string">            "</span><span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的邻接表如下图所示：</p><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.2 有向图/Digraph.png" alt="有向图对应的邻接表内存图"></p><h2 id="有向图的可达性"><a href="#有向图的可达性" class="headerlink" title="有向图的可达性"></a>有向图的可达性</h2><p>代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectedDFS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _marked: [<span class="type">Bool</span>]  <span class="comment">// 标记节点是否调用过dfs， 索引是顶点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(graph: <span class="type">Digraph</span>, s: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>._marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: graph.v())</span><br><span class="line">        dfs(graph, s)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(graph: <span class="type">Digraph</span>, sources: [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>._marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: graph.v())</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> sources &#123;</span><br><span class="line">            <span class="keyword">if</span> !<span class="keyword">self</span>._marked[s] &#123;</span><br><span class="line">                dfs(graph, s)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> graph: Digraph,<span class="number">_</span> v: Int)</span></span>  &#123;</span><br><span class="line">        <span class="keyword">self</span>._marked[v] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> graph.adj(v) &#123;</span><br><span class="line">            <span class="keyword">if</span> !<span class="keyword">self</span>._marked[w] &#123;</span><br><span class="line">                dfs(graph, w)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">marked</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._marked[v]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.2 有向图/DrectedDFS.png" alt="有向图使用深度优先测试连通性"></p><h2 id="环和有向无环图"><a href="#环和有向无环图" class="headerlink" title="环和有向无环图"></a>环和有向无环图</h2><p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有向图学习记录&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
      <category term="第4章图" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>4.1 无向图</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/4.1%20%E6%97%A0%E5%90%91%E5%9B%BE/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/</id>
    <published>2019-07-19T04:07:12.000Z</published>
    <updated>2019-07-22T08:27:58.857Z</updated>
    
    <content type="html"><![CDATA[<p>图： 由一组顶点和一组能够将两个顶点相连的边组成的</p><h2 id="术语表"><a href="#术语表" class="headerlink" title="术语表"></a>术语表</h2><p>当两个顶点通过一条边相连时，我们称这两个顶点是<strong>相邻的</strong> 并称该连接依附于这两个顶点。某个顶点的<strong>度数</strong>即为依附于他的边的总数。</p><p>路径： 在图中，路径是由边顺序连接的一系列顶点。路径或环的长度为其中包含的边数</p><p>连通： 当两个顶点之间存在一条连接双方的路径时，我们称一个顶点和另一个顶点是连通的。</p><p>连通图： 如果顶点是物理存在的对象，如绳节，边是绳子， 任意顶点提起，连通图是一个整体。</p><p>树： 无环连通图</p><p>生成树： 连通图的生成树是它的一副子图，包含图中所有顶点，且是一颗树   </p><p>V个顶点图的树的条件：</p><ol><li>G有V-1条边且不含有环</li><li>G有V-1条边，且是连通</li><li>G是连通的，但删除任何一条边，会使它不再连通</li><li>G是无环图，但添加任何一条边，都会产生一个环</li><li>G中任意一对顶点之间仅存在一条简单路径</li></ol><p>密度： 连接顶点对占所有可能别连接的顶点对的比例。 （稀疏图、稠密图）</p><p>二分图： 每条边连接的两个顶点都分别属于不同部分,</p><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/bipartitle_graph.png" alt="二分图"></p><h2 id="表示无向图的数据类型"><a href="#表示无向图的数据类型" class="headerlink" title="表示无向图的数据类型"></a>表示无向图的数据类型</h2><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>V()-&gt;Int</td><td>顶点数</td></tr><tr><td>E()-&gt;Int</td><td>边数</td></tr><tr><td>addEdge(v: Int, w: Int)</td><td>向图中添加一个边v-w</td></tr><tr><td>adj(v: Int)-&gt;[Int]</td><td>和v相邻的所有顶点</td></tr></tbody></table><p>图的表示方法：</p><ol><li>邻接矩阵 ：V*V的矩阵，当顶点V和W之间有相邻的边时，V行和W列的元素值未true</li><li>邻接表数组</li></ol><p>下图是邻接表内存图：</p><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/Adjacency_lists_representation.png" alt="邻接表内存图"></p><p>图的定义：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Graph &#123;</span><br><span class="line">var vertex: <span class="built_in">Int</span></span><br><span class="line">var adj: [[<span class="built_in">Int</span>]]</span><br><span class="line">var edge: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">init(vertex: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    self.vertex = vertex</span><br><span class="line">    adj = [[<span class="built_in">Int</span>]](repeating: [<span class="built_in">Int</span>](), count: vertex)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">convenience init?(inStream: ReadFile) &#123;</span><br><span class="line">    <span class="keyword">let</span> v = inStream.readInt()</span><br><span class="line">    <span class="keyword">if</span> v != nil &#123;</span><br><span class="line">        self.init(vertex: v!)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nil</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> edge = inStream.readInt()</span><br><span class="line">    <span class="keyword">if</span> edge != nil &#123;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0.</span>.&lt;edge! &#123;</span><br><span class="line">            <span class="keyword">let</span> v = inStream.readInt()</span><br><span class="line">            <span class="keyword">let</span> w = inStream.readInt()</span><br><span class="line">            self.addEdge(v!, w!)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nil</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">func addEdge(_ v: <span class="built_in">Int</span>, _ w: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    self.adj[v].append(w)</span><br><span class="line">    self.adj[w].append(v)</span><br><span class="line">    self.edge += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">func V() -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> vertex</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">func E() -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> edge</span><br><span class="line">&#125;</span><br><span class="line">func toString() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    var result: <span class="built_in">String</span>  =</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    \(V) vertixes \(E) edges \n</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;vertex &#123;</span><br><span class="line">        result += <span class="string">"\(i) :"</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> adj[i] &#123;</span><br><span class="line">            result += <span class="string">"\(w) "</span></span><br><span class="line">        &#125;</span><br><span class="line">        result +=</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        \n</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>图处理的一般策略：从一个顶点移动到另一个顶点</p><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/dfs.png" alt="深度优先搜索轨迹图"></p><ol><li>因为顶点2是0的邻接表的第一个元素，且没有标记过，dfs()递归调用自己来标记并访问顶点2</li><li>现在，顶点0是2的邻接表的第一个元素，且已经被标记了，因此，dfs跳过了他，接下来，顶点1是2的邻接表的第二个元素，且没有标记过，dfs递归调用自己，来标记并访问顶点1</li><li>对顶点1的访问和前面有所不同：因为它的邻接表中的所有顶点（0，2）都已经被标记过了，因此，不需要再递归，方法从dfs（1）返回，下一条被检查的边是2-3，因此dfs递归调用自己，来标记并访问顶点3</li><li>顶点5是3的邻接表的第一个元素且没有被标记，因此dfs递归调用自己来标记并访问顶点5</li><li>顶点5邻接表中的所有顶点（3，0）都已经被标记过了，因此不需要再递归</li><li>顶点4是3的邻接表的下一个元素，且没有被标记过，因此dfs递归调用自己，来标记并访问顶点4，这是最后一个需要被标记的顶点</li></ol><p>深度优先能解决的问题： 单点路径，给定一个一副图和一个起点，回答“从s到给定目的顶点v是否存在一条路径？如果有，找出这条路径”等类似问题。</p><p>下面是深度优先搜索的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepthFirstSearch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _marked: [<span class="type">Bool</span>]  <span class="comment">//描述标记过的顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _count: <span class="type">Int</span> = <span class="number">0</span>  <span class="comment">//描述标记过的顶点个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="type">G</span>: <span class="type">Graph</span>, s: <span class="type">Int</span> ) &#123;</span><br><span class="line">        _marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: <span class="type">G</span>.<span class="type">V</span>() )</span><br><span class="line">        dfs(<span class="type">G</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> G: Graph, <span class="number">_</span> v: Int)</span></span>  &#123;</span><br><span class="line">        _marked[v] = <span class="literal">true</span></span><br><span class="line">        _count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="type">G</span>.adj(v) &#123;</span><br><span class="line">            <span class="keyword">if</span> _marked[w] == <span class="literal">false</span> &#123;</span><br><span class="line">                dfs(<span class="type">G</span>, w)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">marked</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _marked[v]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找路径"><a href="#寻找路径" class="headerlink" title="寻找路径"></a>寻找路径</h2><p>在由v-w第一次访问任意w时，将edgeTo[w]设为v来记住这条路径  。所以edgeTo的理解如下：</p><ol><li>索引是当前节点，终止节点</li><li>值是上一个节点 ，起始节点</li></ol><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/edgeTo.png" alt="edgeTo巧妙的用途-路径树"></p><p>树的特定： 以起点为根节点的树。</p><p>下面是实现代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepthFirstPaths</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _marked: [<span class="type">Bool</span>] <span class="comment">// 标记这个顶点调用过dfs了吗？</span></span><br><span class="line">    <span class="keyword">var</span> _edgeTo: [<span class="type">Int</span>] <span class="comment">//从起点到一个顶点的已知路径上的最后一个顶点</span></span><br><span class="line">    <span class="keyword">let</span> _s: <span class="type">Int</span> <span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="type">G</span>: <span class="type">Graph</span>, s: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">G</span>.<span class="type">V</span>()</span><br><span class="line">        <span class="keyword">self</span>._marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: <span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">self</span>._edgeTo = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">self</span>._s = s</span><br><span class="line">        dfs(<span class="type">G</span>, v: s)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> G: Graph, v: Int)</span></span>  &#123;</span><br><span class="line">        _marked[v] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="type">G</span>.adj(v) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>._marked[w] == <span class="literal">false</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>._edgeTo[w] = v</span><br><span class="line">                dfs(<span class="type">G</span>, v: w)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasPathTo</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._marked[v]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pathTo</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; [<span class="type">Int</span>]? &#123;</span><br><span class="line">        <span class="keyword">if</span> !hasPathTo(v) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">var</span> x = v</span><br><span class="line">        <span class="keyword">repeat</span> &#123;</span><br><span class="line">            path.insert(x, at: <span class="number">0</span>)</span><br><span class="line">            x =  <span class="keyword">self</span>._edgeTo[x]</span><br><span class="line">        &#125; <span class="keyword">while</span> x != <span class="keyword">self</span>._s</span><br><span class="line">        </span><br><span class="line">        path.insert(<span class="keyword">self</span>._s, at: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命题A(续)：使用深度优先搜索得到从给定起点到任何标记顶点的路径所需的时间与路径的长度成正比。</p><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>广度优先搜索能解决单点最短路径问题。</p><p>要找从s到v的最短路径，从s开始，在所有由一条边就可以到达的点多中寻找v，如果找不到，我们就继续在于s距离两条边的所有顶点中寻找v，如此一直继续。</p><p>思路，将起点假如队列中，然后重复下面的步骤：</p><ol><li>取出队列中的下一个顶点v，并标记它</li><li>将与v相邻的所有未被标记的顶点加入队列中</li></ol><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/bfs.png" alt="bfs的轨迹图"></p><p>轨迹说明：</p><ol><li>从队列中删除顶点0， 并标记相邻的顶点2，1，5，并加入队列中。并把他们的edgeTo[]设为0</li><li>从队列中删去顶点2，并检查它的相邻顶点0，1，发现两者都已经标记，将相邻的顶点3，4加入队列，标记他们，并将edgeTo[]设为2</li><li>从队列中删去顶点1，并检查他的相邻顶点0，2，发现他们都已经被标记了</li><li>从队列中删去顶点5，并检查他的相邻顶点3，0，发现他们都已经被标记了</li><li>从队列中删去顶点3，并检查他的相邻顶点5，4，2，发现他们都已经被标记了</li><li>从队列中删去顶点4，并检查他的相邻顶点3，2，发现他们都已经被标记了</li></ol><p>下面是广度优先级查找最短路径的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreadthFirstPaths</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _marked: [<span class="type">Bool</span>] <span class="comment">// 标记这个顶点调用过dfs了吗？</span></span><br><span class="line">    <span class="keyword">var</span> _edgeTo: [<span class="type">Int</span>] <span class="comment">//从起点到一个顶点的已知路径上的最后一个顶点</span></span><br><span class="line">    <span class="keyword">let</span> _s: <span class="type">Int</span> <span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="type">G</span>: <span class="type">Graph</span>, s: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">G</span>.<span class="type">V</span>()</span><br><span class="line">        <span class="keyword">self</span>._marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: <span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">self</span>._edgeTo = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">self</span>._s = s</span><br><span class="line">        bfs(<span class="type">G</span>,s)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bfs</span><span class="params">(<span class="number">_</span> G: Graph, <span class="number">_</span> s: Int)</span></span>  &#123;</span><br><span class="line">        <span class="keyword">var</span> queue = [<span class="type">Int</span>]()</span><br><span class="line">        _marked[s] = <span class="literal">true</span></span><br><span class="line">        queue.append(s)</span><br><span class="line">        <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">            <span class="keyword">let</span> v = queue.removeFirst() <span class="comment">//取出一个顶点处理</span></span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> <span class="type">G</span>.adj(v) &#123;</span><br><span class="line">                <span class="keyword">if</span> !<span class="keyword">self</span>._marked[w] &#123; <span class="comment">//邻接顶点没有被标记过</span></span><br><span class="line">                    <span class="keyword">self</span>._marked[w] = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">self</span>._edgeTo[w] = v</span><br><span class="line">                    queue.append(w)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasPathTo</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._marked[v]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pathTo</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; [<span class="type">Int</span>]? &#123;</span><br><span class="line">        <span class="keyword">if</span> !hasPathTo(v) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">var</span> x = v</span><br><span class="line">        <span class="keyword">repeat</span> &#123;</span><br><span class="line">            path.insert(x, at: <span class="number">0</span>)</span><br><span class="line">            x =  <span class="keyword">self</span>._edgeTo[x]</span><br><span class="line">        &#125; <span class="keyword">while</span> x != <span class="keyword">self</span>._s</span><br><span class="line">        </span><br><span class="line">        path.insert(<span class="keyword">self</span>._s, at: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命题B： 从s可达的任意顶点v，广度优先搜索都能找到一条从s到v的最短路径。</p><p>深度和广度的相同点：</p><ol><li>都是取出下一个顶点，并标记它</li><li>将v的所有相邻而又未被标记的顶点加入数据结构</li></ol><p>不同之处，在于从数据结构中读取下一个顶点的规则：</p><ol><li>对于广度优先级，是最早加入的节点(队列)</li><li>深度优先级搜索，最晚加入的节点(栈)</li></ol><h2 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h2><p>id数组的理解：</p><ol><li>索引，顶点</li><li>值： 所在的连通分量标识</li><li>连通分量标识的范围为0..count-1 </li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _marked: [<span class="type">Bool</span>]</span><br><span class="line">    <span class="keyword">var</span> _id: [<span class="type">Int</span>]</span><br><span class="line">    <span class="keyword">var</span> _count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="type">G</span>: <span class="type">Graph</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> vertexCount = <span class="type">G</span>.<span class="type">V</span>()</span><br><span class="line">        <span class="keyword">self</span>._marked = [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: vertexCount)</span><br><span class="line">        <span class="keyword">self</span>._id = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: vertexCount)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="number">0</span>..&lt;vertexCount &#123;</span><br><span class="line">            <span class="keyword">if</span> !_marked[s] &#123;</span><br><span class="line">                dfs(<span class="type">G</span>, s)</span><br><span class="line">                <span class="keyword">self</span>._count += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> G: Graph, <span class="number">_</span> v: Int)</span></span>  &#123;</span><br><span class="line">        <span class="keyword">self</span>._marked[v] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">self</span>._id[v] = <span class="keyword">self</span>._count</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="type">G</span>.adj(v) &#123;</span><br><span class="line">            <span class="keyword">if</span> !<span class="keyword">self</span>._marked[w] &#123;</span><br><span class="line">                dfs(<span class="type">G</span>, w)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">connected</span><span class="params">(<span class="number">_</span> v: Int, <span class="number">_</span> w: Int)</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="comment">//判断两个顶点是否连通</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._id[v] == <span class="keyword">self</span>._id[w]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">id</span><span class="params">(<span class="number">_</span> v: Int)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="comment">//返回顶点属于的连通分量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._id[v]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="comment">//返回连通分量的个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：图是否有环还没有理解</strong></p><p><img src="/wiki/数据结构与算法/算法4/第4章图/4.1 无向图/cc.png" alt="连通分量轨迹图"></p><p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图： 由一组顶点和一组能够将两个顶点相连的边组成的&lt;/p&gt;
&lt;h2 id=&quot;术语表&quot;&gt;&lt;a href=&quot;#术语表&quot; class=&quot;headerlink&quot; title=&quot;术语表&quot;&gt;&lt;/a&gt;术语表&lt;/h2&gt;&lt;p&gt;当两个顶点通过一条边相连时，我们称这两个顶点是&lt;strong&gt;相邻
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
      <category term="第4章图" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/%E7%AC%AC4%E7%AB%A0%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>42_动态规划实战</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/42_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/42_动态规划实战/</id>
    <published>2019-07-19T01:07:12.000Z</published>
    <updated>2019-07-19T02:48:09.534Z</updated>
    
    <content type="html"><![CDATA[<p>记录动态规划思想</p><a id="more"></a><h2 id="量化两个字符串的相似度"><a href="#量化两个字符串的相似度" class="headerlink" title="量化两个字符串的相似度"></a>量化两个字符串的相似度</h2><ol><li>莱文斯坦距离</li><li>最长公共子串</li></ol><h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h2><ol><li>一个字符一个字符的比较，符合段阶段最优解</li><li>回溯（暴力破解）</li></ol><p>相等： 如果a[i]和 b[i] 匹配 ，我们递归的考察a[i+1] b[j+1]<br>如果不匹配： </p><ul><li>可以删除a[i] 比较a[i+1] ,b[j]</li><li>可以删除b[j] 比较a[i],b[j+1]</li><li>可以在a[i] 前面添加一个和b[j] 相等的字符，比较a[i],b[j+1]</li><li>可以在b[j] 前面添加一个a[i] 想的的字符，比较a[i+1] b[j] </li><li>可以将a[i] 替换成b[j] 或者b[j] 替换a[i] 然后递归的考察a[i+1] b[j+1] </li></ul><ol><li>递归树，查看是否有重复的问题</li><li>状态转移公式</li><li>状态表</li><li>代码填状态表  （一定考虑前一个状态到当前状态转化的方式）</li></ol><p>下面是莱文斯坦距离的两种计算方式，回缩法、动态规划：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDistance</span> &#123;</span></span><br><span class="line">    let a = <span class="string">"mitcmu"</span></span><br><span class="line">    let b = <span class="string">"mtacnu"</span></span><br><span class="line">    let n = <span class="number">6</span></span><br><span class="line">    let m = <span class="number">6</span></span><br><span class="line">    var minDis = Int.max</span><br><span class="line">    func lwstBT(<span class="string">i:</span> Int, <span class="string">j:</span>Int , <span class="string">edist:</span> Int)  &#123;</span><br><span class="line">        <span class="keyword">if</span> i == n || j == m &#123;</span><br><span class="line">            var minEditDidtance = edist</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> i &lt; n &#123;</span><br><span class="line">                minEditDidtance += (n - i)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> j &lt; m &#123;</span><br><span class="line">                minEditDidtance += (m-j)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> minEditDidtance &lt; minDis &#123;</span><br><span class="line">                minDis = minEditDidtance</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> a[a.ljIndex(i)] == b[b.ljIndex(j)] &#123;</span><br><span class="line">            lwstBT(<span class="string">i:</span> i + <span class="number">1</span>, <span class="string">j:</span> j+<span class="number">1</span>, <span class="string">edist:</span> edist)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//两个字符不匹配</span></span><br><span class="line">            lwstBT(<span class="string">i:</span> i, <span class="string">j:</span> j+<span class="number">1</span>, <span class="string">edist:</span> edist + <span class="number">1</span>) <span class="comment">// 删除 b[j] 或者 a[i] 前添加一个字符</span></span><br><span class="line">            lwstBT(<span class="string">i:</span> i+<span class="number">1</span>, <span class="string">j:</span> j, <span class="string">edist:</span> edist + <span class="number">1</span>) <span class="comment">// 删除 a[i] 或者 b[j] 前添加一个字符</span></span><br><span class="line">            lwstBT(<span class="string">i:</span> i+<span class="number">1</span>, <span class="string">j:</span> j+<span class="number">1</span>, <span class="string">edist:</span> edist + <span class="number">1</span>) <span class="comment">// 将 a[i] 和 b[j] 替换为相同字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">func lwstDP() -&gt; Int &#123;</span><br><span class="line">    <span class="comment">//初始化状态表</span></span><br><span class="line">    <span class="selector-tag">var</span> status = [[Int]](repeating: [Int](repeating: <span class="number">0</span>, count: m), count: n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始状态</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123; <span class="comment">// 初始化第 0 行:a[0..0] 与 b[0..j] 的编辑距离</span></span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(<span class="number">0</span>)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(j)] &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = j</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> j != <span class="number">0</span> &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = status[<span class="number">0</span>][j-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; <span class="comment">// 初始化第 0 列:a[0..i] 与 b[0..0] 的编辑距离</span></span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(i)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(<span class="number">0</span>)] &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = i</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="selector-tag">i</span> != <span class="number">0</span> &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = status[i-<span class="number">1</span>][<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123; <span class="comment">// 按行填表</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(i)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(j)] &#123;</span><br><span class="line">                status[i][j] = min(status[i-<span class="number">1</span>][j],status[i][j-<span class="number">1</span>],status[i-<span class="number">1</span>][j-<span class="number">1</span>])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 status[i][j] = min(status[i-<span class="number">1</span>][j],status[i][j-<span class="number">1</span>],status[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return status[n-<span class="number">1</span>][m-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是最长公共子串的动态规划代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">func lcs() -&gt; Int &#123;</span><br><span class="line">    <span class="comment">//初始化状态表</span></span><br><span class="line">    <span class="selector-tag">var</span> status = [[Int]](repeating: [Int](repeating: <span class="number">0</span>, count: m), count: n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始状态</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123; <span class="comment">// 初始化第 0 行:a[0..0] 与 b[0..j] 的编辑距离</span></span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(<span class="number">0</span>)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(j)] &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> j != <span class="number">0</span> &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = status[<span class="number">0</span>][j-<span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; <span class="comment">// 初始化第 0 列:a[0..i] 与 b[0..0] 的编辑距离</span></span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(i)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(<span class="number">0</span>)] &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="selector-tag">i</span> != <span class="number">0</span> &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = status[i-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123; <span class="comment">// 按行填表</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="selector-tag">a</span>[<span class="selector-tag">a</span>.ljIndex(i)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.ljIndex(j)] &#123;</span><br><span class="line">                status[i][j] = max(status[i-<span class="number">1</span>][j],status[i][j-<span class="number">1</span>],status[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                status[i][j] = max(status[i-<span class="number">1</span>][j],status[i][j-<span class="number">1</span>],status[i-<span class="number">1</span>][j-<span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return status[n-<span class="number">1</span>][m-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录动态规划思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>41_动态规划理论</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/41_%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/41_动态规划理论/</id>
    <published>2019-07-18T03:07:12.000Z</published>
    <updated>2019-07-18T10:16:36.021Z</updated>
    
    <content type="html"><![CDATA[<p>记录动态规划思想</p><a id="more"></a><h2 id="一个模型、三个特征"><a href="#一个模型、三个特征" class="headerlink" title="一个模型、三个特征"></a>一个模型、三个特征</h2><p>一个模型：多阶段决策最优模型。解决最优问题，在解决的过程中，需要经历多个决策阶段，每个决策阶段对应一组状态，然后我们寻找一组决策序列，经过这组决策序列，产生最终期望的最优解。</p><p>最优子结构：问题的最优解包含子问题的最优解，反过来说，我们可以通过子问题的最优解，推导出问题的最优解。也就是后阶段的状态可以通过前阶段的状态推导出来。</p><p>无后效性：推导后面，只需要关心前面状态值，不关心状态怎么推导出来。某阶段的状态一旦确定，就不会受之后阶段的决策影响。</p><p>重复子问题：达到某个相同阶段时，可能产生重复的状态 </p><h2 id="两种动态规划的解决思路"><a href="#两种动态规划的解决思路" class="headerlink" title="两种动态规划的解决思路"></a>两种动态规划的解决思路</h2><ol><li>状态转移表法，：回溯算法实现- 定义状态 - 画递归树、找重复子问题、 话状态转移表- 将填表过程翻译为代码</li><li>状态转移方程法：找最优子结构- 写状态转移方程- 将状态转移方程翻译为代码。</li></ol><h2 id="思考题的答案"><a href="#思考题的答案" class="headerlink" title="思考题的答案"></a>思考题的答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Money</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">payMoney</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//定义输入数据</span></span><br><span class="line">        <span class="keyword">let</span> values = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>] <span class="comment">//钱币的种类</span></span><br><span class="line">        <span class="keyword">let</span> pm = <span class="number">9</span>  <span class="comment">//支付金额payMoney</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义自动变量</span></span><br><span class="line">        <span class="keyword">let</span> step = pm/values[<span class="number">0</span>] + <span class="number">1</span> <span class="comment">//定义最大步数</span></span><br><span class="line">        <span class="keyword">var</span> states = [[<span class="type">Int</span>]](repeating: [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: pm+<span class="number">1</span>), <span class="built_in">count</span>: step) <span class="comment">//定义状态图</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;values.<span class="built_in">count</span> &#123;</span><br><span class="line">            states[<span class="number">0</span>][values[i]] = values[i]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//每步选择一种钱币，翻译状态图</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;step &#123;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..&lt;values.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...pm-values[k] &#123;  <span class="comment">//行</span></span><br><span class="line">                    <span class="keyword">if</span> states[i-<span class="number">1</span>][j] &gt; <span class="number">0</span> &#123;</span><br><span class="line">                        states[i][j+values[k]] = values[k]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;step &#123;</span><br><span class="line">            <span class="keyword">if</span> states[i][pm] &gt; <span class="number">0</span> &#123;  <span class="comment">//找到了</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"找到了一种方案： 使用的币的个数：<span class="subst">\(i+<span class="number">1</span>)</span>"</span>)</span><br><span class="line">                <span class="keyword">var</span> column  = pm</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: i, through: <span class="number">0</span>, by: -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> currentMoney = states[j][column]</span><br><span class="line">                    <span class="built_in">print</span>(currentMoney)  <span class="comment">//当前币的大小</span></span><br><span class="line">                    column -= currentMoney</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment">//退出打印最少币种的方式，不退出打印所有方式。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testPayMoney</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ins = <span class="type">Money</span>()</span><br><span class="line">        ins.payMoney()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录动态规划思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>40_初识动态规划</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/40_%E5%88%9D%E8%AF%86%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/40_初识动态规划/</id>
    <published>2019-07-17T03:07:12.000Z</published>
    <updated>2019-07-18T06:57:03.484Z</updated>
    
    <content type="html"><![CDATA[<p>记录动态规划思想</p><a id="more"></a><h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h2><p>在满足最大重量的限制前提下，背包中总重量的最大值是多少?</p><p>回溯方式解决代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem01_BackTrace</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxW = <span class="type">Int</span>.<span class="built_in">min</span>  <span class="comment">// 结果放到 maxW 中</span></span><br><span class="line">    <span class="keyword">let</span> weight = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> w = <span class="number">9</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxWeight</span><span class="params">(i: Int,  cw: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cw == w || i == n &#123; <span class="comment">//cw==w 表示装满了，i==n 表示物品都考察完了</span></span><br><span class="line">            <span class="keyword">if</span> cw &gt; maxW &#123;</span><br><span class="line">                maxW = cw  <span class="comment">//更新最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxWeight(i: i + <span class="number">1</span>, cw: cw) ;<span class="comment">//选择不装i个物品</span></span><br><span class="line">        <span class="keyword">if</span> cw + weight[i] &lt;= w &#123;</span><br><span class="line">            maxWeight(i: i + <span class="number">1</span>, cw: weight[i] + cw)</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testMaxWeight</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> problem01Instance = <span class="type">Problem01_BackTrace</span>()</span><br><span class="line">        problem01Instance.maxWeight(i: <span class="number">0</span>, cw: <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(problem01Instance.maxW)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是动态规划方式解决</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem0_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">knapsack</span><span class="params">(weight: [Int], n: Int, w: Int)</span></span> -&gt; <span class="type">Int</span> &#123;<span class="comment">//weight: 物品重量，n: 物品个数，w: 背包可承载重量</span></span><br><span class="line">        <span class="keyword">var</span> states = [[<span class="type">Bool</span>]](repeating: [<span class="type">Bool</span>](repeating: <span class="literal">false</span>, <span class="built_in">count</span>: w+<span class="number">1</span>), <span class="built_in">count</span>: n)</span><br><span class="line">        states[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> weight[<span class="number">0</span>] &lt; w &#123;</span><br><span class="line">            states[<span class="number">0</span>][weight[<span class="number">0</span>]] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...w &#123;</span><br><span class="line">                <span class="keyword">if</span> states[i-<span class="number">1</span>][j] == <span class="literal">true</span> &#123;</span><br><span class="line">                    states[i][j] = states[i-<span class="number">1</span>][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...w - weight[i] &#123;</span><br><span class="line">                <span class="keyword">if</span> states[i-<span class="number">1</span>][j] == <span class="literal">true</span> &#123;</span><br><span class="line">                    states[i][j+weight[i]] = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: w, through: <span class="number">0</span>, by: -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> states[n-<span class="number">1</span>][i] == <span class="literal">true</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testKnapsack</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> problem01 = <span class="type">Problem0_1</span>()</span><br><span class="line">        <span class="keyword">let</span> weight = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">5</span></span><br><span class="line">        <span class="keyword">let</span> w = <span class="number">9</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> result = problem01.knapsack(weight: weight, n: n, w: w)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把上一层重复的状态（节点）合并，只记录不同的状态，然后基于上一层的状态集合，来推导下一层的状态集合。</p><p>下面是思考题杨辉三角的答案</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YangHuiTriangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> matrix = [[<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">yanghuiTirangle</span><span class="params">(<span class="number">_</span> matrix: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> states = [[<span class="type">Int</span>]](repeating: [<span class="type">Int</span>](repeating: matrix.<span class="built_in">count</span>, <span class="built_in">count</span>: <span class="number">5</span>), <span class="built_in">count</span>: matrix.<span class="built_in">count</span>)</span><br><span class="line">        states[<span class="number">0</span>][<span class="number">0</span>] = matrix[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;matrix.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;matrix[i].<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    states[i][j] = states[i-<span class="number">1</span>][j] + matrix[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == matrix[i].<span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                    states[i][j] = states[i-<span class="number">1</span>][j-<span class="number">1</span>] + matrix[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> top1 = states[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">let</span> top2 = states[i-<span class="number">1</span>][j]</span><br><span class="line">                    states[i][j] = <span class="built_in">min</span>(top1, top2) + matrix[i][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> minDis = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;matrix[matrix.<span class="built_in">count</span>-<span class="number">1</span>].<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="built_in">distance</span> = states[matrix.<span class="built_in">count</span>-<span class="number">1</span>][i]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">distance</span> &lt; minDis &#123;</span><br><span class="line">                minDis = <span class="built_in">distance</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDis</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testTirangle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> triangle = <span class="type">YangHuiTriangle</span>()</span><br><span class="line">        <span class="keyword">let</span> result = triangle.yanghuiTirangle(triangle.matrix)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>贪心：一条路走到黑，就一次机会，只能哪边看着顺眼走哪边</li><li>回溯：一条路走到黑，无数次重来的机会，还怕我走不出来 (Snapshot View)</li><li>动态规划：拥有上帝视角，手握无数平行宇宙的历史存档， 同时发展出无数个未来 (Versioned Archive View)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录动态规划思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>分治思想</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/38_%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/38_分治思想/</id>
    <published>2019-07-17T03:07:12.000Z</published>
    <updated>2019-07-17T03:04:48.465Z</updated>
    
    <content type="html"><![CDATA[<p>记录分治思想</p><a id="more"></a><h2 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h2><p>分治，分而治之。分治是一种处理问题的思想，递归是一种编程技巧。</p><p>步骤：</p><ol><li>分解：将源问题分解成一系列子问题</li><li>解决：递归的求解各个子问题，若子问题足够小，直接求解</li><li>合并：将子问题的结果合并成源问题</li></ol><p>满足的条件：</p><ol><li>原问题与分解的小问题具有相同的模式</li><li>原问题分解的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法和动态规划的明显区别</li><li>具有分解终止条件，也就是说，当问题足够小时，可以直接求解</li><li>可以将子问题合并成原问题，而这个合并操作的复杂度不能太高</li></ol><p>下面是分治求解逆序度的源码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Division &#123;</span><br><span class="line">    <span class="selector-tag">var</span> num = <span class="number">0</span></span><br><span class="line">    func count(<span class="selector-tag">a</span>: inout [Int], count: Int) -&gt; Int &#123;</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        mergeSortCounting(<span class="selector-tag">a</span>: &amp;<span class="selector-tag">a</span>, <span class="selector-tag">p</span>: <span class="number">0</span>, r: count - <span class="number">1</span> )</span><br><span class="line">        return num</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func mergeSortCounting(<span class="selector-tag">a</span>: inout [Int], <span class="selector-tag">p</span>: Int, r: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">p</span> &gt;= r &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let <span class="selector-tag">q</span> = (<span class="selector-tag">p</span> + r) / <span class="number">2</span></span><br><span class="line">        mergeSortCounting(<span class="selector-tag">a</span>: &amp;<span class="selector-tag">a</span>, <span class="selector-tag">p</span>: <span class="selector-tag">p</span>, r: q)</span><br><span class="line">        mergeSortCounting(<span class="selector-tag">a</span>: &amp;<span class="selector-tag">a</span>, <span class="selector-tag">p</span>: q+<span class="number">1</span>, r: r)</span><br><span class="line">        merge(<span class="selector-tag">a</span>: &amp;<span class="selector-tag">a</span>, <span class="selector-tag">p</span>: <span class="selector-tag">p</span>, <span class="selector-tag">q</span>: <span class="selector-tag">q</span>, r: r)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func merge(<span class="selector-tag">a</span>: inout [Int], <span class="selector-tag">p</span>: Int, <span class="selector-tag">q</span>: Int, r: Int) &#123;</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">i</span> = p</span><br><span class="line">        <span class="selector-tag">var</span> j = <span class="selector-tag">q</span> + <span class="number">1</span></span><br><span class="line">        <span class="selector-tag">var</span> k = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">var</span> temp: [Int] = Array(repeating: <span class="number">0</span>, count: r-p+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        while <span class="selector-tag">i</span> &lt;= <span class="selector-tag">q</span> &amp;&amp; j &lt;= r &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="selector-tag">a</span>[i] &lt;= <span class="selector-tag">a</span>[j] &#123;</span><br><span class="line">                temp[k] = <span class="selector-tag">a</span>[i]</span><br><span class="line">                <span class="selector-tag">i</span> += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num += (<span class="selector-tag">q</span> - <span class="selector-tag">i</span> + <span class="number">1</span>)</span><br><span class="line">                temp[k] = <span class="selector-tag">a</span>[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        while <span class="selector-tag">i</span> &lt;= <span class="selector-tag">q</span> &#123;</span><br><span class="line">            temp[k] = <span class="selector-tag">a</span>[i]</span><br><span class="line">            <span class="selector-tag">i</span> += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        while j &lt;= r &#123;</span><br><span class="line">            temp[k] = <span class="selector-tag">a</span>[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span> ... r-<span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="selector-tag">a</span>[p+i] = temp[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static func testDivision() &#123;</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">a</span> = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">        let division = Division()</span><br><span class="line">        print(division.count(<span class="selector-tag">a</span>: &amp;<span class="selector-tag">a</span>, count: <span class="number">6</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以解决的问题"><a href="#可以解决的问题" class="headerlink" title="可以解决的问题"></a>可以解决的问题</h2><p>分治可以解决耗时问题、大内存问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录分治思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>39_回溯思想</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/39_%E5%9B%9E%E6%BA%AF%E6%80%9D%E6%83%B3/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/39_回溯思想/</id>
    <published>2019-07-17T03:07:12.000Z</published>
    <updated>2019-07-17T06:45:13.471Z</updated>
    
    <content type="html"><![CDATA[<p>记录回溯思想</p><a id="more"></a><h2 id="回溯思想"><a href="#回溯思想" class="headerlink" title="回溯思想"></a>回溯思想</h2><p>遇到分岔路口时， 随意选择一条路，当发现一条路不通时，回到上一个岔路口。</p><p>八皇后问题：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">8</span>)</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cal8Queens</span><span class="params">(row:Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">8</span> &#123;</span><br><span class="line">            printQueens(result: result)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;  <span class="comment">//每一行都有8种方法</span></span><br><span class="line">            <span class="keyword">if</span> isOK(row: row, column: column) &#123;</span><br><span class="line">                result[row] = column</span><br><span class="line">                cal8Queens(row: row + <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isOK</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> leftUp = column - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> rightUp = column + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: row-<span class="number">1</span>, through: <span class="number">0</span>, by: -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> result[i] == column &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> leftUp &gt;= <span class="number">0</span> &amp;&amp; result[i] == leftUp &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> rightUp &lt; <span class="number">8</span> &amp;&amp; result[i] == rightUp &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            leftUp -= <span class="number">1</span></span><br><span class="line">            rightUp += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printQueens</span><span class="params">(result: [Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> result[i] == j &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"Q "</span>, terminator: <span class="string">""</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"* "</span>, terminator: <span class="string">""</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">" "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"一种方案完成---------"</span>)</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testQueen8</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> queen = <span class="type">Queen8</span>()</span><br><span class="line">            </span><br><span class="line">        queen.cal8Queens(row: <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(queen.<span class="built_in">count</span>)  <span class="comment">//92种方案</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录回溯思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>swift 使用经验</title>
    <link href="http://yoursite.com/wiki/IOS/swift%E8%AF%AD%E8%A8%80/swift%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/wiki/IOS/swift语言/swift使用经验/</id>
    <published>2019-07-17T01:07:12.000Z</published>
    <updated>2019-07-17T03:45:31.893Z</updated>
    
    <content type="html"><![CDATA[<p>列举swift使用经验</p><a id="more"></a><h2 id="Swift-数组Array作为函数参数时如何在函数内部改变其值？"><a href="#Swift-数组Array作为函数参数时如何在函数内部改变其值？" class="headerlink" title="Swift 数组Array作为函数参数时如何在函数内部改变其值？"></a>Swift 数组Array作为函数参数时如何在函数内部改变其值？</h2><p>Swift中我们可以在参数类型的前面加上一个 inout 关键字，并在调用函数时在参数前加个取地址符 &amp;，如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func doSomething(numArr: inout [String])&#123;</span><br><span class="line">    numArr.append(<span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> numbers = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line"><span class="function"><span class="title">doSomething</span><span class="params">(numArr: &amp;numbers)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(numbers)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意，inout 修饰参数时采用的是拷入拷出模式，即在函数内部使用的是参数的copy，函数结束后，又对参数重新赋值。</p><p>由此，可以延伸一下，当一个类的属性被设置了 willSet 和 didSet 观察器时，如果该属性被作为函数参数，同时被 inout 修饰，那么当调用此函数时，会触发 willSet 和 didSet 观察器。</p></blockquote><h2 id="for循环倒序"><a href="#for循环倒序" class="headerlink" title="for循环倒序"></a>for循环倒序</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (0<span class="built_in">..</span>.10).reversed() &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stride(<span class="keyword">from</span>:3,through:0,by: -1) &#123;</span><br><span class="line">    <span class="builtin-name">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift的stride函数返回一个任意可变步长类型值的序列。可变步长类型是可以设置偏移量的一维标量。他有两个变种:</p><ol><li>from，to，最后一个值将会严格小(大)于to的值stride(from:3, to:0, by:-1) 表示3，2，1</li><li>from，through，最后一个值将会小(大)于等于through的值stride(from:3, through:0, by:-1) 表示3，2，1，0</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列举swift使用经验&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/IOS/swift%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>AC自动机多模式匹配</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/36_AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/36_AC自动机/</id>
    <published>2019-07-16T04:07:12.000Z</published>
    <updated>2019-07-16T09:35:56.575Z</updated>
    
    <content type="html"><![CDATA[<p>记录AC算法的主要思想</p><a id="more"></a><h2 id="失效指针计算"><a href="#失效指针计算" class="headerlink" title="失效指针计算"></a>失效指针计算</h2><p>计算失效指针的过程，看起来复杂，其实，如果我们把树中深度相同的节点放到同一层，那么某个节点的失败指针只能出现在上一层。</p><p>说白了，当前点相同， 找后缀的最长前缀 </p><p><img src="/wiki/数据结构与算法/数据结构和算法之美/36_AC自动机/AC_failed.png" alt="失败指针的示意图"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildFailurePoint</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> queue:[<span class="type">ACNode</span>] = <span class="type">Array</span>()</span><br><span class="line">    root.fail = <span class="literal">nil</span></span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">        <span class="keyword">let</span> p = queue.removeFirst()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">26</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pc = p.children[i]  <span class="comment">//p的子节点</span></span><br><span class="line">            <span class="keyword">if</span> pc == <span class="literal">nil</span> &#123; <span class="comment">//如果当前节点没有值，当然没有必要求失败指针了</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> p == root &#123; <span class="comment">//如果父节点，第二层，没必要循环了，直接设置为root</span></span><br><span class="line">                pc!.fail = root</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> q:<span class="type">ACNode</span>? = p.fail</span><br><span class="line">                <span class="keyword">while</span> q != <span class="literal">nil</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> qc = q?.children[pc!.data.toInt() - <span class="type">Character</span>(<span class="string">"a"</span>).toInt()]</span><br><span class="line">                    <span class="keyword">if</span> qc != <span class="literal">nil</span> &#123; <span class="comment">//处理相等的情况，最长后缀加长</span></span><br><span class="line">                        pc?.fail = qc</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    q = q!.fail  <span class="comment">//循环的根节点吧 ，退而求其，找个短的  </span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> q == <span class="literal">nil</span> &#123;</span><br><span class="line">                    pc?.fail = root</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queue.append(pc!)</span><br><span class="line">        &#125; <span class="comment">//end for</span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ACNode定义如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">Character</span>  <span class="comment">//节点的key</span></span><br><span class="line">    <span class="keyword">var</span> children : [<span class="type">ACNode</span>?]  <span class="comment">// 指向子节点的数组，字符集只包含 a~z 这 26 个字符</span></span><br><span class="line">    <span class="keyword">var</span> isEndingChar = <span class="literal">false</span> <span class="comment">//结尾字符为true</span></span><br><span class="line">    <span class="keyword">var</span> length = -<span class="number">1</span>  <span class="comment">//当isEndingChar= true时，记录模式串的长度</span></span><br><span class="line">    <span class="keyword">var</span> fail:<span class="type">ACNode</span>? <span class="comment">// 失败指针</span></span><br><span class="line">    <span class="keyword">init</span>(data:<span class="type">Character</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.data = data</span><br><span class="line">        <span class="keyword">self</span>.children = <span class="type">Array</span>(repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: childrenCount)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: ACNode, rhs: ACNode)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> lhs.data == rhs.data &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func insert(<span class="built_in">text</span>: String) &#123;</span><br><span class="line">    var p = root</span><br><span class="line">    <span class="keyword">for</span> i in <span class="number">0</span>..&lt;<span class="built_in">text</span>.count &#123;</span><br><span class="line">        <span class="built_in">let</span> index:Int = <span class="built_in">text</span>[<span class="built_in">text</span>.index(<span class="built_in">text</span>.startIndex, offsetBy: i)].toInt() - Character(<span class="string">"a"</span>).toInt()</span><br><span class="line">        <span class="keyword">if</span> p.<span class="built_in">children</span>[index] == nil &#123;</span><br><span class="line">            <span class="built_in">let</span> newNode = ACNode(data: <span class="built_in">text</span>[<span class="built_in">text</span>.index(<span class="built_in">text</span>.startIndex, offsetBy: i)])</span><br><span class="line">            p.<span class="built_in">children</span>[index] = newNode</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.<span class="built_in">children</span>[index]!</span><br><span class="line">    &#125;</span><br><span class="line">    p.isEndingChar = <span class="literal">true</span>;</span><br><span class="line">    p.length = <span class="built_in">text</span>.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mach</span><span class="params">(text: String)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> n = text.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">ACNode</span>? = root</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123; <span class="comment">//for里面p不可能为nil</span></span><br><span class="line">        <span class="keyword">let</span> index = text[text.index(text.startIndex, offsetBy: i)].toInt() - <span class="type">Character</span>(<span class="string">"a"</span>).toInt()</span><br><span class="line">        <span class="keyword">while</span> p?.children[index] == <span class="literal">nil</span> &amp;&amp; p !== root &#123;  <span class="comment">//向树根节点移动，找最长后缀</span></span><br><span class="line">            p = p?.fail!  <span class="comment">// 失败指针发挥作用的地方</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//下面逻辑处理匹配情况， p增加</span></span><br><span class="line">        p = p?.children[index]</span><br><span class="line">        <span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">            p = root <span class="comment">// 如果没有匹配的，从 root 开始重新匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tmp = p!</span><br><span class="line">        <span class="keyword">while</span> tmp !== root &#123;</span><br><span class="line">            <span class="keyword">if</span> tmp.isEndingChar == <span class="literal">true</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> pos = i - tmp.length + <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"匹配的起始下标 <span class="subst">\(pos)</span> length=<span class="subst">\(tmp.length)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp.fail!;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录AC算法的主要思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>KMP字符串查找</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/34_KMP/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/数据结构和算法之美/34_KMP/</id>
    <published>2019-07-12T10:07:12.000Z</published>
    <updated>2019-07-16T01:27:41.925Z</updated>
    
    <content type="html"><![CDATA[<p>记录KMP算法的主要思想</p><a id="more"></a><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>模式串和主串匹配的过程，当遇到不匹配的字符的时候，我们希望找到一种规律，可以往后多滑动几位。</p><p>模式串和主串匹配的过程中，存在相等和不相等的可能。</p><p>不相等的处理：拿好前缀本身，在它的后缀子串中，查找最长的那个可以和好前缀的前缀子串匹配。</p><p><img src="/wiki/数据结构与算法/数据结构和算法之美/34_KMP/KMP_多滑动几位.png" alt="匹配过程中，不相等处理"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func kmp(<span class="string">a:</span> String, <span class="string">n:</span> Int, <span class="string">b:</span> String, <span class="string">m:</span>Int) -&gt; Int &#123;</span><br><span class="line">    let next = getNexts(<span class="string">b:</span> b, <span class="string">m:</span> m)</span><br><span class="line">    var j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;n &#123;</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> &amp;&amp; a[a.index(a.startIndex, <span class="string">offsetBy:</span> i)] != b[b.index(b.startIndex, <span class="string">offsetBy:</span> j)] &#123; <span class="comment">//处理不等于的情况，i不动，j尽量移动多位</span></span><br><span class="line">            j = next[j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//相等，继续往后比较</span></span><br><span class="line">        <span class="keyword">if</span> a[a.index(a.startIndex, <span class="string">offsetBy:</span> i)] == b[b.index(b.startIndex, <span class="string">offsetBy:</span> j)] &#123;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//查找到了结果</span></span><br><span class="line">        <span class="keyword">if</span> j == m &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="失效函数计算方法"><a href="#失效函数计算方法" class="headerlink" title="失效函数计算方法"></a>失效函数计算方法</h2><p>next说明：</p><ol><li>下标：每个前缀结尾的下标</li><li>值： 这个前缀的最长可以匹配的前缀子串的结尾下标</li></ol><p>next[i-1] = k-1,则next[i] = k</p><p><img src="/wiki/数据结构与算法/数据结构和算法之美/34_KMP/KMP_Next求解中，相等处理.png" alt="KMP_Next求解中，相等处理"></p><p>查找b[0,i-1]的次长可匹配后缀子串，这个问题变成， 查找b[0,y]的最长匹配后缀子串的问题</p><p><img src="/wiki/数据结构与算法/数据结构和算法之美/34_KMP/KMP_next求解中，不相等.png" alt="KMP_Next求解中，相等处理"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*失效函数：  b 表示模式串，m表示模式串的长度*/</span></span><br><span class="line">func getNexts(<span class="selector-tag">b</span>: String, m: Int) -&gt; [Int] &#123;</span><br><span class="line">    <span class="selector-tag">var</span> next:[Int] = Array(repeating: -<span class="number">1</span>, count: m)  <span class="comment">//定义失效函数</span></span><br><span class="line">    <span class="selector-tag">var</span> k = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">        while k != -<span class="number">1</span> &amp;&amp; <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.index(<span class="selector-tag">b</span><span class="selector-class">.startIndex</span>, offsetBy: k+<span class="number">1</span>)] != <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.index(<span class="selector-tag">b</span><span class="selector-class">.startIndex</span>, offsetBy: i)] &#123;</span><br><span class="line">            k = next[k]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.index(<span class="selector-tag">b</span><span class="selector-class">.startIndex</span>, offsetBy: k+<span class="number">1</span>)] == <span class="selector-tag">b</span>[<span class="selector-tag">b</span>.index(<span class="selector-tag">b</span><span class="selector-class">.startIndex</span>, offsetBy: i)] &#123;</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        next[k] = k</span><br><span class="line">    &#125;</span><br><span class="line">    return next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录KMP算法的主要思想&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构和算法之美" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>理解OAuth</title>
    <link href="http://yoursite.com/wiki/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/OAuth%202.0/OAuth/"/>
    <id>http://yoursite.com/wiki/编程理论/OAuth 2.0/OAuth/</id>
    <published>2019-07-11T04:11:35.000Z</published>
    <updated>2019-07-16T01:23:34.166Z</updated>
    
    <content type="html"><![CDATA[<p>理解OAuth</p><a id="more"></a><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p><img src="/wiki/编程理论/OAuth 2.0/OAuth/auth.png" alt="OAuth"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" rel="external nofollow noopener noreferrer" target="_blank">理解OAuth 2.0</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解OAuth&lt;/p&gt;
    
    </summary>
    
      <category term="编程理论" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
      <category term="OAuth 2.0" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/OAuth-2-0/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftUI 数据流理解</title>
    <link href="http://yoursite.com/wiki/IOS/swiftUI/swiftUI_DataFlow/"/>
    <id>http://yoursite.com/wiki/IOS/swiftUI/swiftUI_DataFlow/</id>
    <published>2019-07-02T04:07:12.000Z</published>
    <updated>2019-07-09T08:43:08.092Z</updated>
    
    <content type="html"><![CDATA[<ol><li>对于不变的常量直接传递给 SwiftUI 即可。</li><li>对于控件上需要管理的状态使用 @State 管理。</li><li>对于外部的事件变化使用 BindableObject 发送通知。</li><li>对于需要共享的视图可变数据使用 @ObjectBinding 管理。</li><li>不要出现多个状态同步管理，使用 @Binding 共享一个 Source of truth。</li><li>对于系统环境使用 @Enviroment 管理。</li><li>对于需要共享的不可变数据使用 @EnviromemntObject 管理。</li><li>@Binding 具有引用语义，可以很好的和 @Binding @objectBinding @State 协作，避免出现多个数据不同步。</li></ol><a id="more"></a><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/State.png" alt="State"></p><h2 id="Binding-引用语义"><a href="#Binding-引用语义" class="headerlink" title="Binding(引用语义)"></a>Binding(引用语义)</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/Binding.png" alt="Binding"></p><h2 id="BindingConvertible（state转化为引用语义的Binding）"><a href="#BindingConvertible（state转化为引用语义的Binding）" class="headerlink" title="BindingConvertible（state转化为引用语义的Binding）"></a>BindingConvertible（state转化为引用语义的Binding）</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/BindingConvertible.png" alt="BindingConvertible"></p><h2 id="BindableObject（接受外部通知）"><a href="#BindableObject（接受外部通知）" class="headerlink" title="BindableObject（接受外部通知）"></a>BindableObject（接受外部通知）</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/BindableObject.png" alt="BindableObject"></p><h2 id="ObjectBinding-多个界面共用一个数据，内部包装多个界面"><a href="#ObjectBinding-多个界面共用一个数据，内部包装多个界面" class="headerlink" title="ObjectBinding(多个界面共用一个数据，内部包装多个界面)"></a>ObjectBinding(多个界面共用一个数据，内部包装多个界面)</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/ObjectBinding.png" alt="ObjectBinding"></p><h2 id="EnvionmentObject-环境对象"><a href="#EnvionmentObject-环境对象" class="headerlink" title="EnvionmentObject(环境对象)"></a>EnvionmentObject(环境对象)</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_DataFlow/EnvionmentObject.png" alt="ObjectBinding"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation" rel="external nofollow noopener noreferrer" target="_blank">官方教程</a></li><li><a href="https://onevcat.com/2019/06/swift-ui-firstlook/" rel="external nofollow noopener noreferrer" target="_blank">SwiftUI 的一些初步探索 (一)</a></li><li><a href="https://mp.weixin.qq.com/s/ciiauLB__o-cXXfKn7lL1Q" rel="external nofollow noopener noreferrer" target="_blank">系列文章深度解读|SwiftUI 背后那些事儿</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;对于不变的常量直接传递给 SwiftUI 即可。&lt;/li&gt;
&lt;li&gt;对于控件上需要管理的状态使用 @State 管理。&lt;/li&gt;
&lt;li&gt;对于外部的事件变化使用 BindableObject 发送通知。&lt;/li&gt;
&lt;li&gt;对于需要共享的视图可变数据使用 @ObjectBinding 管理。&lt;/li&gt;
&lt;li&gt;不要出现多个状态同步管理，使用 @Binding 共享一个 Source of truth。&lt;/li&gt;
&lt;li&gt;对于系统环境使用 @Enviroment 管理。&lt;/li&gt;
&lt;li&gt;对于需要共享的不可变数据使用 @EnviromemntObject 管理。&lt;/li&gt;
&lt;li&gt;@Binding 具有引用语义，可以很好的和 @Binding @objectBinding @State 协作，避免出现多个数据不同步。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="swiftUI" scheme="http://yoursite.com/categories/IOS/swiftUI/"/>
    
    
      <category term="SwiftUI" scheme="http://yoursite.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 分享内容</title>
    <link href="http://yoursite.com/wiki/IOS/swiftUI/swiftUI_Share/"/>
    <id>http://yoursite.com/wiki/IOS/swiftUI/swiftUI_Share/</id>
    <published>2019-07-02T04:07:12.000Z</published>
    <updated>2019-07-10T11:58:19.510Z</updated>
    
    <content type="html"><![CDATA[<p>介绍SwiftUI</p><a id="more"></a><h2 id="跨平台技术演变史"><a href="#跨平台技术演变史" class="headerlink" title="跨平台技术演变史"></a>跨平台技术演变史</h2><ol><li>H5+原生（Cordova）</li><li>JavaScript开发+原生渲染 （React Native、Weex）</li><li>自绘UI+原生功能(Flutter、SwiftUI)</li></ol><h3 id="H5-原生"><a href="#H5-原生" class="headerlink" title="H5+原生"></a>H5+原生</h3><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_H5.png" alt="混合APP的原理"></p><p>缺点：</p><ol><li>webview渲染存在性能瓶颈、复杂任务无法胜任</li><li>调用原生功能需要封装插件，麻烦</li></ol><h3 id="JavaScript开发-原生渲染"><a href="#JavaScript开发-原生渲染" class="headerlink" title="JavaScript开发+原生渲染"></a>JavaScript开发+原生渲染</h3><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_Weex.png" alt="JavaScript开发+原生渲染"></p><p>分析： </p><ol><li>解决了Webview渲染性能问题，相比较于原生，多了从Vue到原始的翻译过程。</li><li>调用原生功能需要封装插件，也比较麻烦</li></ol><h3 id="自绘UI-原生功能"><a href="#自绘UI-原生功能" class="headerlink" title="自绘UI+原生功能"></a>自绘UI+原生功能</h3><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_flutter.png" alt="flutter"></p><p>flutter Dart语言开发, Skia渲染。Skia是Google的一个2D图形处理函数库，包含字型、坐标转换，以及点阵图都有高效能且简洁的表现，Skia是跨平台的，并提供了非常友好的API</p><p>分析： </p><ol><li>解决了JS到Native的翻译过程，自渲染。</li><li>调用原生功能需要封装插件，也比较麻烦</li></ol><h2 id="SwiftUI简介"><a href="#SwiftUI简介" class="headerlink" title="SwiftUI简介"></a>SwiftUI简介</h2><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_SwiftUI.png" alt="SwiftUI"></p><ol><li>声明式语法（SwiftUI），内部黑盒完成渲染</li><li>响应式编程，数据变化，监控、通知SwiftUI刷新数据</li><li>无缝调用原始功能</li></ol><h2 id="一个例子—体验SwiftUI现代编程语言的魅力"><a href="#一个例子—体验SwiftUI现代编程语言的魅力" class="headerlink" title="一个例子—体验SwiftUI现代编程语言的魅力"></a>一个例子—体验SwiftUI现代编程语言的魅力</h2><p>代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">struct</span>  <span class="selector-tag">LandmarkList</span>: <span class="selector-tag">View</span> &#123;</span><br><span class="line">    <span class="variable">@EnvironmentObject</span> var <span class="attribute">userData</span>: UserData</span><br><span class="line">    </span><br><span class="line">    var <span class="attribute">body</span>: some View &#123;</span><br><span class="line">        <span class="selector-tag">NavigationView</span> &#123;</span><br><span class="line">            <span class="selector-tag">List</span> &#123;</span><br><span class="line">                <span class="selector-tag">Toggle</span>(<span class="attribute">isOn</span>: $userData.showFavoritesOnly) &#123;</span><br><span class="line">                    <span class="selector-tag">Text</span>(<span class="string">"Show Favorites Only"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="selector-tag">ForEach</span>(userData.landmarks) &#123; <span class="selector-tag">landmark</span> <span class="selector-tag">in</span></span><br><span class="line">                    <span class="selector-tag">if</span> !<span class="selector-tag">self</span><span class="selector-class">.userData</span><span class="selector-class">.showFavoritesOnly</span> || <span class="selector-tag">landmark</span><span class="selector-class">.isFavorite</span> &#123;</span><br><span class="line">                        <span class="selector-tag">NavigationButton</span>(</span><br><span class="line">                            <span class="attribute">destination</span>: LandmarkDetail(<span class="attribute">landmark</span>: landmark)</span><br><span class="line">                                .environmentObject(self.userData)</span><br><span class="line">                        ) &#123;</span><br><span class="line">                            <span class="selector-tag">LandmarkRow</span>(<span class="attribute">landmark</span>: landmark)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.navigationBarTitle</span>(Text(<span class="string">"Landmarks"</span>), <span class="attribute">displayMode</span>: .large)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">struct</span> <span class="selector-tag">LandmarkRow</span>: <span class="selector-tag">View</span> &#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">landmark</span>: <span class="selector-tag">Landmark</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">body</span>: <span class="selector-tag">some</span> <span class="selector-tag">View</span> &#123;</span><br><span class="line">        <span class="selector-tag">HStack</span> &#123;</span><br><span class="line">            <span class="selector-tag">landmark</span><span class="selector-class">.image</span>(<span class="attribute">forSize</span>: <span class="number">50</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="selector-tag">Text</span>(<span class="attribute">verbatim</span>: landmark.name)</span><br><span class="line">            </span><br><span class="line">            <span class="selector-tag">Spacer</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="selector-tag">if</span> <span class="selector-tag">landmark</span><span class="selector-class">.isFavorite</span> &#123;</span><br><span class="line">                <span class="selector-tag">VStack</span> &#123;</span><br><span class="line">                    <span class="selector-tag">Image</span>(<span class="attribute">systemName</span>: <span class="string">"star.fill"</span>)</span><br><span class="line">                        <span class="selector-class">.imageScale</span>(.medium)</span><br><span class="line">                        <span class="selector-class">.foregroundColor</span>(.yellow)</span><br><span class="line">                    <span class="selector-tag">Text</span>(<span class="string">"sdfsdf"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_Sample.png" alt="例子"></p><h2 id="SwiftUI原理浅析"><a href="#SwiftUI原理浅析" class="headerlink" title="SwiftUI原理浅析"></a>SwiftUI原理浅析</h2><h3 id="View的运作原理"><a href="#View的运作原理" class="headerlink" title="View的运作原理"></a>View的运作原理</h3><p>体会了SwiftUI的简洁用法，强大的功能后，分析下背后的原理：</p><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_modifer.png" alt="声明式原理"></p><p>定义了View的协议，所有的控件都准守View协议，View协议只定义了一个属性body，由于有了body属性，所以可以对body做对应的操作，这些操作封装在View的扩展中。这些扩展称为modifier。modifer作用于一个元素后，返回一个modified对象，这个对象也准守View协议，可以链式调用。</p><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_VIew_protocal.png" alt="view协议定义"></p><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_chain.png" alt="链式调用的分析"></p><ol><li>声明了控件的样式（内存看是链式结构）， 传入渲染引擎渲染。开发者只声明，不用管复杂的渲染机制，大大简化了开发难度</li><li>按需添加modifer，避免子类内存暴涨（性能）</li><li>基于协议式，底层可以任意修改，底层预留可非常大的扩展空间</li></ol><h3 id="HStack-ZStack"><a href="#HStack-ZStack" class="headerlink" title="HStack/ZStack"></a>HStack/ZStack</h3><p>HStack 和 ZStack 的非常类似安卓的 LinerLayout，算法也同 Flex 布局比较相似。 对于如下的布局, 苹果都会在控件之间添加上符合苹果人机交互指南的间距，保证 UI 的优雅和一致性。</p><p><img src="/wiki/IOS/swiftUI/swiftUI_Share/SwiftUI_Stack.png" alt="Stack"></p><p>对于如上的 Stack 是怎么计算的？设 Stack 主轴方向长度为 W1。</p><ol><li>根据人机交互指南的预留出边距 S, 边距根据元素的排列可能有多个</li><li>得到剩余的主轴宽度 W2= W1 - N * S</li><li>平均分配一个预估宽度</li><li>计算一些具备明确宽高的元素 如 Image 设置了 Frame的元素的等。</li><li>沿主轴方向从前到后计算，，如果计算出来的宽度小于预估宽度则正常显示，不够则截断。</li><li>最后的元素为剩余宽度，如果不够显示则阶段</li><li>默认的交叉轴对齐方式为 Center，Stack 占据包括最大元素的边界。</li></ol><p>默认的计算是顺序计算布局，如果某些元素比较重要，可以使用 LayoutPriority Modifier 提高布局优先级避免出现视图截断。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>基于声明式，底层做了大量工作，上层开发者开发更简单</li><li>响应式也简化了内部状态的维护</li><li>苹果生态系统的无缝衔接，无缝调用原生功能</li><li>内部人性化精细的设计，苹果的大力推广，不久的几年后，苹果开发的主要方式？</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation" rel="external nofollow noopener noreferrer" target="_blank">官方教程</a></li><li><a href="https://onevcat.com/2019/06/swift-ui-firstlook/" rel="external nofollow noopener noreferrer" target="_blank">SwiftUI 的一些初步探索 (一)</a></li><li><a href="https://mp.weixin.qq.com/s/ciiauLB__o-cXXfKn7lL1Q" rel="external nofollow noopener noreferrer" target="_blank">系列文章深度解读|SwiftUI 背后那些事儿</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍SwiftUI&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="swiftUI" scheme="http://yoursite.com/categories/IOS/swiftUI/"/>
    
    
      <category term="SwiftUI" scheme="http://yoursite.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Swift新特性</title>
    <link href="http://yoursite.com/wiki/IOS/swiftUI/swiftUI/"/>
    <id>http://yoursite.com/wiki/IOS/swiftUI/swiftUI/</id>
    <published>2019-07-02T04:07:12.000Z</published>
    <updated>2019-07-04T11:00:51.440Z</updated>
    
    <content type="html"><![CDATA[<p>本文按照自己的思路理解swift的新特性</p><a id="more"></a><h2 id="function-Builder-新特性"><a href="#function-Builder-新特性" class="headerlink" title="function Builder  新特性"></a>function Builder  新特性</h2><h2 id="单表达式隐式返回"><a href="#单表达式隐式返回" class="headerlink" title="单表达式隐式返回"></a>单表达式隐式返回</h2><p>计算属性、函数语句、闭包表达式，如果只有一个表达式，可以省略return关键字</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Rectangle &#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">width</span> = <span class="number">0.0</span>, <span class="built_in">height</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="built_in">var</span> area1: Double &#123; <span class="built_in">width</span> * <span class="built_in">height</span> &#125;</span><br><span class="line">    </span><br><span class="line">    func area2() -&gt; Double &#123; <span class="built_in">width</span> * <span class="built_in">height</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据结构体默认成员合成默认初始化器"><a href="#根据结构体默认成员合成默认初始化器" class="headerlink" title="根据结构体默认成员合成默认初始化器"></a>根据结构体默认成员合成默认初始化器</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct Dog &#123;</span><br><span class="line">    var <span class="attr">name</span> = <span class="string">"Generic dog name"</span></span><br><span class="line">    var <span class="attr">age</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">boltNewborn</span> = Dog()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">daisyNewborn</span> = Dog(name: <span class="string">"Daisy"</span>, age: <span class="number">0</span>)</span><br><span class="line">// before swift <span class="number">5.0</span> ❎</span><br><span class="line"><span class="keyword">let</span> <span class="attr">benjiNewborn</span> = Dog(name: <span class="string">"Benji"</span>)</span><br><span class="line">// after switft <span class="number">5.1</span> ✅</span><br><span class="line"><span class="keyword">let</span> <span class="attr">benjiNewborn</span> = Dog(name: <span class="string">"Benji"</span>)</span><br></pre></td></tr></table></figure><h2 id="属性包装器"><a href="#属性包装器" class="headerlink" title="属性包装器"></a>属性包装器</h2><p><img src="/wiki/IOS/swiftUI/swiftUI/propertyWarpper.png" alt="属性包装器"></p><h2 id="不透明返回类型"><a href="#不透明返回类型" class="headerlink" title="不透明返回类型"></a>不透明返回类型</h2><p>协议中有关联类型，不是一个完全类型，编译时，无法推断类型，使用some 修饰协议返回值，就是不透明返回类型，使用者不知道类型， 编译器知道具体的类型。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// after switft 5.1 ✅</span></span><br><span class="line">struct ContentView: View &#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">body</span>: some View &#123;</span><br><span class="line">        Text(<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swift-Style-DSL-Function-Builder"><a href="#Swift-Style-DSL-Function-Builder" class="headerlink" title="Swift Style DSL / Function Builder"></a>Swift Style DSL / Function Builder</h2><p><img src="/wiki/IOS/swiftUI/swiftUI/viewBuildrer.png" alt="function Builder  新特性"></p><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p>优先使用值类型，在栈上分配，COW </p><h2 id="协议还是泛型"><a href="#协议还是泛型" class="headerlink" title="协议还是泛型"></a>协议还是泛型</h2><p>使用协议时，尽量优先抽取功能，使用组合协议</p><h2 id="抽象数据访问"><a href="#抽象数据访问" class="headerlink" title="抽象数据访问"></a>抽象数据访问</h2><p>@Binding @State @EnviromentObject @Enviroment。</p><h2 id="View链式调用的理解"><a href="#View链式调用的理解" class="headerlink" title="View链式调用的理解"></a>View链式调用的理解</h2><p><img src="/wiki/IOS/swiftUI/swiftUI/VIewModifier.png" alt="View链式调用的理解"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation" rel="external nofollow noopener noreferrer" target="_blank">官方教程</a></li><li><a href="https://onevcat.com/2019/06/swift-ui-firstlook/" rel="external nofollow noopener noreferrer" target="_blank">SwiftUI 的一些初步探索 (一)</a></li><li><a href="https://mp.weixin.qq.com/s/ciiauLB__o-cXXfKn7lL1Q" rel="external nofollow noopener noreferrer" target="_blank">系列文章深度解读|SwiftUI 背后那些事儿</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文按照自己的思路理解swift的新特性&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="swiftUI" scheme="http://yoursite.com/categories/IOS/swiftUI/"/>
    
    
      <category term="SwiftUI" scheme="http://yoursite.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking 源码浅析</title>
    <link href="http://yoursite.com/wiki/IOS/opensource/AFNetworking/AFNetworking/"/>
    <id>http://yoursite.com/wiki/IOS/opensource/AFNetworking/AFNetworking/</id>
    <published>2019-06-05T10:07:12.000Z</published>
    <updated>2019-06-05T11:49:12.850Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习了AFNetworking，画了几个图，当做学习的成绩，留作以后复习使用。</p><a id="more"></a><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p><img src="/wiki/IOS/opensource/AFNetworking/AFNetworking/AFNetworking1.png" alt="AFNetworking"></p><h2 id="接收到响应"><a href="#接收到响应" class="headerlink" title="接收到响应"></a>接收到响应</h2><p><img src="/wiki/IOS/opensource/AFNetworking/AFNetworking/AFNetworking2.png" alt="AFNetworking"></p><h2 id="进度条模块"><a href="#进度条模块" class="headerlink" title="进度条模块"></a>进度条模块</h2><p><img src="/wiki/IOS/opensource/AFNetworking/AFNetworking/AFNetworking3.png" alt="AFNetworking"></p><h2 id="认证模块"><a href="#认证模块" class="headerlink" title="认证模块"></a>认证模块</h2><p><img src="/wiki/IOS/opensource/AFNetworking/AFNetworking/AFNetworking4.png" alt="AFNetworking"></p><p><img src="/wiki/IOS/opensource/AFNetworking/AFNetworking/AFNetworking5.png" alt="AFNetworking"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/draveness/analyze/blob/master/contents/AFNetworking/验证%20HTTPS%20请求的证书（五）.md" rel="external nofollow noopener noreferrer" target="_blank">验证 HTTPS 请求的证书（五）</a></li><li><a href="https://www.jianshu.com/p/488c1f46cedd" rel="external nofollow noopener noreferrer" target="_blank">11.第三方源码-AFNetworking解析</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文学习了AFNetworking，画了几个图，当做学习的成绩，留作以后复习使用。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="opensource" scheme="http://yoursite.com/categories/IOS/opensource/"/>
    
      <category term="AFNetworking" scheme="http://yoursite.com/categories/IOS/opensource/AFNetworking/"/>
    
    
      <category term="AFNetworking" scheme="http://yoursite.com/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>iOS App 签名的原理([抄袭的，有问题请联系](http://wereadteam.github.io/2017/03/13/Signature/))</title>
    <link href="http://yoursite.com/wiki/IOS/%E6%9A%82%E6%97%A0%E5%88%86%E7%B1%BB/ios_sign/"/>
    <id>http://yoursite.com/wiki/IOS/暂无分类/ios_sign/</id>
    <published>2019-06-03T04:07:12.000Z</published>
    <updated>2019-06-03T09:29:49.395Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 签名机制挺复杂，各种证书，Provisioning Profile，entitlements，CertificateSigningRequest，p12，AppID，概念一堆，也很容易出错，本文尝试从原理出发，一步步推出为什么会有这么多概念，希望能有助于理解 iOS App 签名的原理和流程。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>先来看看苹果的签名机制是为了做什么。在 iOS 出来之前，在主流操作系统(Mac/Windows/Linux)上开发和运行软件是不需要签名的，软件随便从哪里下载都能运行，导致平台对第三方软件难以控制，盗版流行。苹果希望解决这样的问题，在 iOS 平台对第三方 APP 有绝对的控制权，一定要保证每一个安装到 iOS 上的 APP 都是经过苹果官方允许的，怎样保证呢？就是通过签名机制。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>通常我们说的签名就是数字签名，它是基于非对称加密算法实现的。对称加密是通过同一份密钥加密和解密数据，而非对称加密则有两份密钥，分别是公钥和私钥，用公钥加密的数据，要用私钥才能解密，用私钥加密的数据，要用公钥才能解密。</p><p>简单说一下常用的非对称加密算法 RSA 的数学原理，理解简单的数学原理，就可以理解非对称加密是怎么做到的，为什么会是安全的：</p><ol><li>选两个质数 p 和 q，相乘得出一个大整数n，例如 p=61，q=53，n=pq=3233</li><li>选 1-n 间的随便一个质数 e，例如 e = 17</li><li>经过一系列数学公式，算出一个数字 d，满足：<br>a. 通过 n 和 e 这两个数据一组数据进行数学运算后，可以通过 n 和 d 去反解运算，反过来也可以。<br>b. 如果只知道 n 和 e，要推导出 d，需要知道 p 和 q，也就是要需要把 n 因数分解。</li></ol><p>上述的 (n,e) 这两个数据在一起就是公钥，(n,d) 这两个数据就是私钥，满足用公钥加密，私钥解密，或反过来公钥加密，私钥解密，也满足在只暴露公钥（只知道 n 和 e）的情况下，要推导出私钥 (n,d)，需要把大整数 n 因数分解。目前因数分解只能靠暴力穷举，而n数字越大，越难以用穷举计算出因数 p 和 q，也就越安全，当 n 大到二进制 1024 位或 2048 位时，以目前技术要破解几乎不可能，所以非常安全。</p><p>若对数字 d 是怎样计算出来的感兴趣，可以详读这两篇文章：<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" rel="external nofollow noopener noreferrer" target="_blank">RSA 算法原理（一）（二）</a></p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>现在知道了有非对称加密这东西，那数字签名是怎么回事呢？</p><p>数字签名的作用是我对某一份数据打个标记，表示我认可了这份数据（签了个名），然后我发送给其他人，其他人可以知道这份数据是经过我认证的，数据没有被篡改过。</p><p>有了上述非对称加密算法，就可以实现这个需求：</p><p><img src="/wiki/IOS/暂无分类/ios_sign/sign0.png" alt=""></p><ol><li>首先用一种算法，算出原始数据的摘要。需满足 a.若原始数据有任何变化，计算出来的摘要值都会变化。 b.摘要要够短。这里最常用的算法是MD5。</li><li>生成一份非对称加密的公钥和私钥，私钥我自己拿着，公钥公布出去。</li><li>对一份数据，算出摘要后，用私钥加密这个摘要，得到一份加密后的数据，称为原始数据的签名。把它跟原始数据一起发送给用户。</li><li>用户收到数据和签名后，用公钥解密得到摘要。同时用户用同样的算法计算原始数据的摘要，对比这里计算出来的摘要和用公钥解密签名得到的摘要是否相等，若相等则表示这份数据中途没有被篡改过，因为如果篡改过，摘要会变化。</li></ol><p>之所以要有第一步计算摘要，是因为非对称加密的原理限制可加密的内容不能太大（不能大于上述 n 的位数，也就是一般不能大于 1024 位/ 2048 位），于是若要对任意大的数据签名，就需要改成对它的特征值签名，效果是一样的。</p><p>好了，有了非对称加密的基础，知道了数字签名是什么，怎样可以保证一份数据是经过某个地方认证的，来看看怎样通过数字签名的机制保证每一个安装到 iOS 上的 APP 都是经过苹果认证允许的。</p><h2 id="最简单的签名"><a href="#最简单的签名" class="headerlink" title="最简单的签名"></a>最简单的签名</h2><p>要实现这个需求很简单，最直接的方式，苹果官方生成一对公私钥，在 iOS 里内置一个公钥，私钥由苹果后台保存，我们传 App 上 AppStore 时，苹果后台用私钥对 APP 数据进行签名，iOS 系统下载这个 APP 后，用公钥验证这个签名，若签名正确，这个 APP 肯定是由苹果后台认证的，并且没有被修改过，也就达到了苹果的需求：保证安装的每一个 APP 都是经过苹果官方允许的。</p><p><img src="/wiki/IOS/暂无分类/ios_sign/sign1.png" alt="最简单的签名"></p><p>如果我们 iOS 设备安装 APP 只有从 AppStore 下载这一种方式的话，这件事就结束了，没有任何复杂的东西，只有一个数字签名，非常简单地解决问题。</p><p>但实际上因为除了从 AppStore 下载，我们还可以有三种方式安装一个 App：</p><ol><li>开发 App 时可以直接把开发中的应用安装进手机进行调试。</li><li>In-House 企业内部分发，可以直接安装企业证书签名后的 APP。</li><li>AD-Hoc 相当于企业分发的限制版，限制安装设备数量，较少用。</li></ol><p>苹果要对用这三种方式安装的 App 进行控制，就有了新的需求，无法像上面这样简单了。</p><h2 id="新的需求"><a href="#新的需求" class="headerlink" title="新的需求"></a>新的需求</h2><p>我们先来看第一个，开发时安装APP，它有两个个需求：</p><ol><li>安装包不需要传到苹果服务器，可以直接安装到手机上。如果你编译一个 APP 到手机前要先传到苹果服务器签名，这显然是不能接受的。</li><li>苹果必须对这里的安装有控制权，包括</li></ol><ul><li>a.经过苹果允许才可以这样安装。</li><li>b.不能被滥用导致非开发app也能被安装。</li></ul><p>为了实现这些需求，iOS 签名的复杂度也就开始增加了。</p><p>苹果这里给出的方案是使用了双层签名，会比较绕，流程大概是这样的：</p><p><img src="/wiki/IOS/暂无分类/ios_sign/sign2.png" alt="新的需求"></p><ol><li>在你的 Mac 开发机器生成一对公私钥，这里称为公钥L，私钥L。L:Local</li><li>苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。这里称为公钥A，私钥A。A:Apple</li><li>把公钥 L 传到苹果后台，用苹果后台里的私钥 A 去签名公钥 L。得到一份数据包含了公钥 L 以及其签名，把这份数据称为证书。</li><li>在开发时，编译完一个 APP 后，用本地的私钥 L 对这个 APP 进行签名，同时把第三步得到的证书一起打包进 APP 里，安装到手机上。</li><li>在安装时，iOS 系统取得证书，通过系统内置的公钥 A，去验证证书的数字签名是否正确。</li><li>验证证书后确保了公钥 L 是苹果认证过的，再用公钥 L 去验证 APP 的签名，这里就间接验证了这个 APP 安装行为是否经过苹果官方允许。（这里只验证安装行为，不验证APP 是否被改动，因为开发阶段 APP 内容总是不断变化的，苹果不需要管。）</li></ol><h2 id="加点东西"><a href="#加点东西" class="headerlink" title="加点东西"></a>加点东西</h2><p>上述流程只解决了上面第一个需求，也就是需要经过苹果允许才可以安装，还未解决第二个避免被滥用的问题。怎么解决呢？苹果再加了两个限制，一是限制在苹果后台注册过的设备才可以安装，二是限制签名只能针对某一个具体的 APP。</p><p>怎么加的？在上述第三步，苹果用私钥 A 签名我们本地公钥 L 时，实际上除了签名公钥 L，还可以加上无限多数据，这些数据都可以保证是经过苹果官方认证的，不会有被篡改的可能。</p><p><img src="/wiki/IOS/暂无分类/ios_sign/sign3.png" alt="加点东西"></p><p>可以想到把 允许安装的设备 ID 列表 和 App对应的 AppID 等数据，都在第三步这里跟公钥L一起组成证书，再用苹果私钥 A 对这个证书签名。在最后第 5 步验证时就可以拿到设备 ID 列表，判断当前设备是否符合要求。根据数字签名的原理，只要数字签名通过验证，第 5 步这里的设备 IDs / AppID / 公钥 L 就都是经过苹果认证的，无法被修改，苹果就可以限制可安装的设备和 APP，避免滥用。</p><h2 id="最终流程"><a href="#最终流程" class="headerlink" title="最终流程"></a>最终流程</h2><p>到这里这个证书已经变得很复杂了，有很多额外信息，实际上除了 设备 ID / AppID，还有其他信息也需要在这里用苹果签名，像这个 APP 里 iCloud / push / 后台运行 等权限苹果都想控制，苹果把这些权限开关统一称为 Entitlements，它也需要通过签名去授权。</p><p>实际上一个“证书”本来就有规定的格式规范，上面我们把各种额外信息塞入证书里是不合适的，于是苹果另外搞了个东西，叫 Provisioning Profile，一个 Provisioning Profile 里就包含了证书以及上述提到的所有额外信息，以及所有信息的签名。</p><p>所以整个流程稍微变一下，就变成这样了：</p><p><img src="/wiki/IOS/暂无分类/ios_sign/sign4.png" alt="最终流程"></p><p>因为步骤有小变动，这里我们不辞啰嗦重新再列一遍整个流程：</p><ol><li>在你的 Mac 开发机器生成一对公私钥，这里称为公钥L，私钥L。L:Local</li><li>苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。这里称为公钥A，私钥A。A:Apple</li><li>把公钥 L 传到苹果后台，用苹果后台里的私钥 A 去签名公钥 L。得到一份数据包含了公钥 L 以及其签名，把这份数据称为证书。</li><li>在苹果后台申请 AppID，配置好设备 ID 列表和 APP 可使用的权限，再加上第③步的证书，组成的数据用私钥 A 签名，把数据和签名一起组成一个 Provisioning Profile 文件，下载到本地 Mac 开发机。</li><li>在开发时，编译完一个 APP 后，用本地的私钥 L 对这个 APP 进行签名，同时把第④步得到的 Provisioning Profile 文件打包进 APP 里，文件名为 embedded.mobileprovision，把 APP 安装到手机上。</li><li>在安装时，iOS 系统取得证书，通过系统内置的公钥 A，去验证 embedded.mobileprovision 的数字签名是否正确，里面的证书签名也会再验一遍。</li><li>确保了 embedded.mobileprovision 里的数据都是苹果授权以后，就可以取出里面的数据，做各种验证，包括用公钥 L 验证APP签名，验证设备 ID 是否在 ID 列表上，AppID 是否对应得上，权限开关是否跟 APP 里的 Entitlements 对应等。<br>开发者证书从签名到认证最终苹果采用的流程大致是这样，还有一些细节像证书有效期/证书类型等就不细说了。</li></ol><h2 id="概念和操作"><a href="#概念和操作" class="headerlink" title="概念和操作"></a>概念和操作</h2><p>上面的步骤对应到我们平常具体的操作和概念是这样的：</p><ol><li>第 1 步对应的是 keychain 里的 “从证书颁发机构请求证书”，这里就本地生成了一堆公私钥，保存的 CertificateSigningRequest 就是公钥，私钥保存在本地电脑里。</li><li>第 2 步苹果处理，不用管。</li><li>第 3 步对应把 CertificateSigningRequest 传到苹果后台生成证书，并下载到本地。这时本地有两个证书，一个是第 1 步生成的，一个是这里下载回来的，keychain 会把这两个证书关联起来，因为他们公私钥是对应的，在XCode选择下载回来的证书时，实际上会找到 keychain 里对应的私钥去签名。这里私钥只有生成它的这台 Mac 有，如果别的 Mac 也要编译签名这个 App 怎么办？答案是把私钥导出给其他 Mac 用，在 keychain 里导出私钥，就会存成 .p12 文件，其他 Mac 打开后就导入了这个私钥。</li><li>第 4 步都是在苹果网站上操作，配置 AppID / 权限 / 设备等，最后下载 Provisioning Profile 文件。</li><li>第 5 步 XCode 会通过第 3 步下载回来的证书（存着公钥），在本地找到对应的私钥（第一步生成的），用本地私钥去签名 App，并把 Provisioning Profile 文件命名为 embedded.mobileprovision 一起打包进去。这里对 App 的签名数据保存分两部分，Mach-O 可执行文件会把签名直接写入这个文件里，其他资源文件则会保存在 _CodeSignature 目录下。</li><li>第 6 - 7 步的打包和验证都是 Xcode 和 iOS 系统自动做的事。</li></ol><p>这里再总结一下这些概念：</p><p>证书：内容是公钥或私钥，由其他机构对其签名组成的数据包。</p><ol><li>Entitlements：包含了 App 权限开关列表。</li><li>CertificateSigningRequest：本地公钥。</li><li>p12：本地私钥，可以导入到其他电脑。</li><li>Provisioning Profile：包含了 证书 / Entitlements 等数据，并由苹果后台私钥签名的数据包。</li></ol><h2 id="其他发布方式"><a href="#其他发布方式" class="headerlink" title="其他发布方式"></a>其他发布方式</h2><p>前面以开发包为例子说了签名和验证的流程，另外两种方式 In-House 企业签名和 AD-Hoc 流程也是差不多的，只是企业签名不限制安装的设备数，另外需要用户在 iOS 系统设置上手动点击信任这个企业才能通过验证。</p><p>而 AppStore 的签名验证方式有些不一样，前面我们说到最简单的签名方式，苹果在后台直接用私钥签名 App 就可以了，实际上苹果确实是这样做的，如果去下载一个 AppStore 的安装包，会发现它里面是没有 embedded.mobileprovision 文件的，也就是它安装和启动的流程是不依赖这个文件，验证流程也就跟上述几种类型不一样了。</p><p>据猜测，因为上传到 AppStore 的包苹果会重新对内容加密，原来的本地私钥签名就没有用了，需要重新签名，从 AppStore 下载的包苹果也并不打算控制它的有效期，不需要内置一个 embedded.mobileprovision 去做校验，直接在苹果用后台的私钥重新签名，iOS 安装时用本地公钥验证 App 签名就可以了。</p><p>那为什么发布 AppStore 的包还是要跟开发版一样搞各种证书和 Provisioning Profile？猜测因为苹果想做统一管理，Provisioning Profile 里包含一些权限控制，AppID 的检验等，苹果不想在上传 AppStore 包时重新用另一种协议做一遍这些验证，就不如统一把这部分放在 Provisioning Profile 里，上传 AppStore 时只要用同样的流程验证这个 Provisioning Profile 是否合法就可以了。</p><p>所以 App 上传到 AppStore 后，就跟你的 证书 / Provisioning Profile 都没有关系了，无论他们是否过期或被废除，都不会影响 AppStore 上的安装包。</p><p>到这里 iOS 签名机制的原理和主流程大致说完了，希望能对理解苹果签名和排查日常签名问题有所帮助。</p><h2 id="AppStore-加密"><a href="#AppStore-加密" class="headerlink" title="AppStore 加密"></a>AppStore 加密</h2><p>另一个问题是我们把 App 传上 AppStore 后，苹果会对 App 进行加密，导致 App 体积增大不少，这个加密实际上是没卵用的，只是让破解的人要多做一个步骤，运行 App 去内存 dump 出可执行文件而已，无论怎样加密，都可以用这种方式拿出加密前的可执行文件。所以为什么要做这样的加密呢？想不到有什么好处。</p><h2 id="本地私钥"><a href="#本地私钥" class="headerlink" title="本地私钥"></a>本地私钥</h2><p>我们看到前面说的签名流程很绕很复杂，经常出现各种问题，像有 Provisioning Profile 文件但证书又不对，本地有公钥证书没对应私钥等情况，不理解原理的情况下会被绕晕，我的疑问是，这里为什么不能简化呢？还是以开发证书为例，为什么一定要用本地 Mac 生成的私钥去签名？苹果要的只是本地签名，私钥不一定是要本地生成的，苹果也可以自己生成一对公私钥给我们，放在 Provisioning Profile 里，我们用里面的私钥去加密就行了，这样就不会有 CertificateSigningRequest 和 p12 的概念，跟本地 keychain 没有关系，不需要关心证书，只要有 Provisioning Profile 就能签名，流程会减少，易用性会提高很多，同时苹果想要的控制一点都不会少，也没有什么安全问题，为什么不这样设计呢？</p><p>能想到的一个原因是 Provisioning Profile 在非 AppStore 安装时会打包进安装包，第三方拿到这个 Provisioning Profile 文件就能直接用起来给他自己的 App 签名了。但这种问题也挺好解决，只需要打包时去掉文件里的私钥就行了，所以仍不明白为什么这样设计。</p><h2 id="mobileprovision-格式调研-这点是自己的"><a href="#mobileprovision-格式调研-这点是自己的" class="headerlink" title="mobileprovision 格式调研(这点是自己的)"></a>mobileprovision 格式调研(这点是自己的)</h2><p><img src="/wiki/IOS/暂无分类/ios_sign/sign5.png" alt="mobileprovision"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 签名机制挺复杂，各种证书，Provisioning Profile，entitlements，CertificateSigningRequest，p12，AppID，概念一堆，也很容易出错，本文尝试从原理出发，一步步推出为什么会有这么多概念，希望能有助于理解 iOS App 签名的原理和流程。&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="暂无分类" scheme="http://yoursite.com/categories/IOS/%E6%9A%82%E6%97%A0%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="iOS App 签名的原理" scheme="http://yoursite.com/tags/iOS-App-%E7%AD%BE%E5%90%8D%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>单词查找数</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/5_2_search/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/5_2_search/</id>
    <published>2019-05-30T02:07:12.000Z</published>
    <updated>2019-05-30T10:16:11.353Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p><h2 id="单词查找树"><a href="#单词查找树" class="headerlink" title="单词查找树"></a>单词查找树</h2><p>每个节点都有R条连接，其中R为字母表的大小</p><p>每个键所关联的值保存在该键的最后一个字母所对应的节点中。值为空的节点在符号表中没有对应的键，他们的存在是为了简化单词查找树中的查找操作。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>以被查找的键中的字符为导向，单词查找树中的每个节点都包含了下一个可能出现的所有字符的链接。</p><p>查找结果：</p><ol><li>尾字符对应的节点中的值非空，查找一次命中，键所对应的值就是尾字符所对应的节点中保存的值。</li><li>键的尾字符所对应的节点中值为空，未命中，符号表中不存在被查找的键</li><li>查找结束于一条空链接，这也是一次未命中的查找</li></ol><p>查找过程就是在单词查找树中从根节点开始检查某条路径上所有节点。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ol><li>在到达键尾部前就遇到了一个空链接，需要为键中还未被检查的每个字符创建一个对应的节点，并将键对应的值保存在最后一个节点中。</li><li>在遇到空链接前就到达了健的尾部，将该节点中值设为键对应的值。</li></ol><h3 id="节点的表示"><a href="#节点的表示" class="headerlink" title="节点的表示"></a>节点的表示</h3><p>每个节点都含有一个值和26个链接</p><p>在单词查找树中，键是由从根节点到含有非空值的节点的路径隐式表示的。数据节点并不会保存字符串或字符，它保存了链接数组和值。基于含有R个字符的字母表的单词查找数称为<strong>R向单词查找树</strong>。</p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p>size的延时实现：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">size</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>(Node x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x.val) ++cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;R, ++i)</span><br><span class="line">&#123;</span><br><span class="line">cnt += <span class="keyword">size</span>(<span class="keyword">next</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="built_in">get</span>(Node x,<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> d)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(d== <span class="built_in">key</span>.length()) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始递归</span></span><br><span class="line"><span class="built_in">char</span> c = <span class="built_in">key</span>.charAt(d++);</span><br><span class="line">Node next = x.next[c];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>(next, <span class="built_in">key</span>,d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Value <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node node = <span class="built_in">get</span>(root,<span class="built_in">key</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> node.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node put(Node x, <span class="keyword">String</span> <span class="built_in">key</span>, Value val, <span class="built_in">int</span> d) &#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="keyword">null</span>) x= <span class="keyword">new</span> Node();</span><br><span class="line"><span class="keyword">if</span>(d == <span class="built_in">key</span>.length()) &#123;x.val = val, <span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="built_in">char</span> c = <span class="built_in">key</span>.charAt(d);</span><br><span class="line">x.next[c] = put(x.next[c],<span class="built_in">key</span>,val,d+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, Value val) &#123;</span><br><span class="line">root = put(root,<span class="built_in">key</span>,val,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找所有键"><a href="#查找所有键" class="headerlink" title="查找所有键"></a>查找所有键</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> collect(Node x, <span class="keyword">String</span> pre, Queue&lt;<span class="keyword">String</span>&gt;) &#123;</span><br><span class="line"><span class="keyword">if</span>(x== <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x.val != <span class="keyword">null</span>) q.enqueue(pre);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">char</span> c=<span class="number">0</span>; c&lt;R; c++) &#123;</span><br><span class="line">collect(x.next[c],pre+c,q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Iterable&lt;<span class="keyword">String</span>&gt; keysWithPrefix(<span class="keyword">String</span> pre) &#123;</span><br><span class="line">Queue&lt;<span class="keyword">String</span>&gt;  q = <span class="keyword">new</span> Queue&lt;Sting&gt;();</span><br><span class="line">collect(<span class="built_in">get</span>(root,pre,<span class="number">0</span>),pre,q);</span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://algs4.cs.princeton.edu/code/javadoc/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;算法4 官网地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
    
      <category term="单词查找数" scheme="http://yoursite.com/tags/%E5%8D%95%E8%AF%8D%E6%9F%A5%E6%89%BE%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>字符串排序</title>
    <link href="http://yoursite.com/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/5_1_sort/"/>
    <id>http://yoursite.com/wiki/数据结构与算法/算法4/5_1_sort/</id>
    <published>2019-05-30T02:07:12.000Z</published>
    <updated>2019-05-30T02:19:46.129Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://algs4.cs.princeton.edu/code/javadoc/" rel="external nofollow noopener noreferrer" target="_blank">算法4 官网地址</a></p><h2 id="键索引排序"><a href="#键索引排序" class="headerlink" title="键索引排序"></a>键索引排序</h2><p>说明： <code>a[]</code> 中存储待排序的数据，字符串名字，组号（我们作为键），组号在<code>0~R-1</code>，取出组号的方式：<code>a[i].key()</code></p><ol><li>计算各组的频率<code>count[r+1]++</code>;</li><li>频率转索引  <code>count[r] = count[r-1] + count[r]</code></li><li>数据分类</li><li>回写</li></ol><h2 id="低位优先的字符串排序"><a href="#低位优先的字符串排序" class="headerlink" title="低位优先的字符串排序"></a>低位优先的字符串排序</h2><p>如果字符串的长度均为W，那就从右向左以每个字符作为键，用键索引计数法将字符串排序W遍。</p><p>理解的方法是向前看：如果有两个键，他们中还没有被检查过的字符都完全相同，不同之处取决于已经检查过的字符，因为两个键已经排序，有序。另外，如果还没有被检查过的部分不同，那么已经被检查过的字符对于两者的最终顺序没有意义。之后的某轮会保证有序。</p><h2 id="高位优先的字符串排序"><a href="#高位优先的字符串排序" class="headerlink" title="高位优先的字符串排序"></a>高位优先的字符串排序</h2><p>首先用键索引计数法将所有字符串按照首字母排序，然后递归的再将每个首字母所对于的子数组排序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://algs4.cs.princeton.edu/code/javadoc/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;算法4 官网地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法4" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%954/"/>
    
    
      <category term="字符串排序" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
