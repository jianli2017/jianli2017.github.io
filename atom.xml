<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJ小窝</title>
  
  <subtitle>勤总结、勤记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-13T11:04:49.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JLRoute学习</title>
    <link href="http://yoursite.com/wiki/IOS/opensource/JLRoute/JLRoute/"/>
    <id>http://yoursite.com/wiki/IOS/opensource/JLRoute/JLRoute/</id>
    <published>2019-05-13T04:07:12.000Z</published>
    <updated>2019-05-13T11:04:49.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h2><p><img src="/wiki/IOS/opensource/JLRoute/JLRoute/register.png" alt="注册流程"></p><h2 id="route流程"><a href="#route流程" class="headerlink" title="route流程"></a>route流程</h2><p><img src="/wiki/IOS/opensource/JLRoute/JLRoute/routerurl.png" alt="route流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注册流程&quot;&gt;&lt;a href=&quot;#注册流程&quot; class=&quot;headerlink&quot; title=&quot;注册流程&quot;&gt;&lt;/a&gt;注册流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/wiki/IOS/opensource/JLRoute/JLRoute/register.png&quot; a
      
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="opensource" scheme="http://yoursite.com/categories/IOS/opensource/"/>
    
      <category term="JLRoute" scheme="http://yoursite.com/categories/IOS/opensource/JLRoute/"/>
    
    
      <category term="JLRoute" scheme="http://yoursite.com/tags/JLRoute/"/>
    
  </entry>
  
  <entry>
    <title>NSScanner</title>
    <link href="http://yoursite.com/wiki/IOS/foundation%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/NSScaner/"/>
    <id>http://yoursite.com/wiki/IOS/foundation使用记录/NSScaner/</id>
    <published>2019-05-13T01:35:49.000Z</published>
    <updated>2019-05-13T10:21:48.262Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>A string parser that scans for substrings or characters in a character set, and for numeric values from decimal, hexadecimal, and floating-point representations.</p><p>NSScanner是一个string的解析器。</p><p>An NSScanner object interprets and converts the characters of an NSString object into number and string values. </p><p>NSScanner对象将 NSString对象的字符 解析转化为 数字或string。</p><p>NSScanner是个类族。</p><p>初始化方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>scannerWithString:</span><br></pre></td></tr></table></figure><p>扫描字符或string</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="string">scanCharactersFromSet:</span><span class="string">intoString:</span></span><br></pre></td></tr></table></figure><p>扫描一个数字</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>scanDecimal:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;A string parser that scans for substrings or characters in a character set, and for numeric values from decimal, hexade
      
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="foundation使用记录" scheme="http://yoursite.com/categories/IOS/foundation%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="NSScanner" scheme="http://yoursite.com/tags/NSScanner/"/>
    
  </entry>
  
  <entry>
    <title>NSURL记录</title>
    <link href="http://yoursite.com/wiki/IOS/foundation%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/NSURL%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/wiki/IOS/foundation使用记录/NSURL记录/</id>
    <published>2019-05-10T07:35:49.000Z</published>
    <updated>2019-05-10T11:00:15.844Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="url是什么？"><a href="#url是什么？" class="headerlink" title="url是什么？"></a>url是什么？</h2><p>url是（ Uniform Resource Locator ）统一资源定位符的缩写。</p><h2 id="完整格式-amp-语法"><a href="#完整格式-amp-语法" class="headerlink" title="完整格式&amp;语法"></a>完整格式&amp;语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme:[<span class="string">//[user[:password</span>]@]host[<span class="string">:port</span>]][<span class="string">/path</span>][<span class="symbol">?query</span>][<span class="string">#fragment</span>]</span><br></pre></td></tr></table></figure><ol><li>scheme: 传送协议。</li><li>层级URL标记符号(为[//],固定不变)</li><li>user、password：访问资源需要的凭证信息（可省略）</li><li>host：服务器。（通常为域名，有时为IP地址）</li><li>port：端口号。（以数字方式表示，若为HTTP的默认值“:80”可省略）</li><li>path：路径。（以“/”字符区别路径中的每一个目录名称）</li><li>query：查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）</li><li>fragment：片段。以“#”字符为起点</li></ol><hr><h2 id="NSURLComponents"><a href="#NSURLComponents" class="headerlink" title="NSURLComponents"></a>NSURLComponents</h2><ul><li><p>Accessing Components in Native Format</p><p> 包括：fragment、host、path、query、queryItems、scheme等</p></li><li><p>Accessing Components in URL-Encoded Format</p><p> 包括：percentEncodedFragment、percentEncodedHost等</p></li><li><p>Locating Components in the URL String Representation</p><p>包括：rangeOfFragment、rangeOfHost等</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;url是什么？&quot;&gt;&lt;a href=&quot;#url是什么？&quot; class=&quot;headerlink&quot; title=&quot;url是什么？&quot;&gt;&lt;/a&gt;url是什么？&lt;/h2&gt;&lt;p&gt;url是（ Uniform Resource Locator ）
      
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="foundation使用记录" scheme="http://yoursite.com/categories/IOS/foundation%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="NSURL" scheme="http://yoursite.com/tags/NSURL/"/>
    
  </entry>
  
  <entry>
    <title>appledoc生成文档实践</title>
    <link href="http://yoursite.com/wiki/%E5%B7%A5%E5%85%B7/use_appledoc/"/>
    <id>http://yoursite.com/wiki/工具/use_appledoc/</id>
    <published>2019-05-05T02:18:26.000Z</published>
    <updated>2019-05-05T03:57:03.555Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步，下载appledoc，安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/tomaz/appledoc.git</span><br><span class="line"><span class="keyword">cd</span> ./appledoc</span><br><span class="line">sudo <span class="keyword">sh</span> install-appledoc.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>第二步，验证appledoc是否安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appledoc <span class="comment">--help</span></span><br></pre></td></tr></table></figure><p>第三步， touch命令创建脚本，复制下面代码到脚本，然后添加执行权限，执行脚本：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">appledoc \</span><br><span class="line">-<span class="ruby">-output ./apiDoc \</span></span><br><span class="line"><span class="ruby">-i *.m \</span></span><br><span class="line"><span class="ruby">--project-name <span class="string">"GSecretKey"</span> \</span></span><br><span class="line"><span class="ruby">--project-company <span class="string">"com.Gome"</span> \</span></span><br><span class="line"><span class="ruby">--no-create-docset \</span></span><br><span class="line"><span class="ruby">--keep-undocumented-objects \</span></span><br><span class="line"><span class="ruby">--keep-undocumented-members \</span></span><br><span class="line"><span class="ruby">--no-warn-undocumented-object \</span></span><br><span class="line"><span class="ruby">--no-warn-undocumented-member  \</span></span><br><span class="line"><span class="ruby">./</span></span><br></pre></td></tr></table></figure><p>这样就可以将<code>./</code>目录下所有头文件中的注释自动生成出对应的文档到<code>./apiDoc</code>目录下。实际使用中，可以根据需要修改源文件路径、生成文件的路径、project-name、project-company。</p><p>上面的脚本是可以运行的，但是少了注释，难以理解。不添加注释的原因是：上面的命令太长，使用多行显示，使用 <code>\</code>实现多行功能，如果在 <code>\</code> 后直接添加注释，脚本会运行报错，没有地方添加注释。所以，可执行的脚本没有注释，下面将有注释的脚本单独列出来，方便理解:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">appledoc <span class="string">\</span></span><br><span class="line"><span class="comment">#文档输出目录</span></span><br><span class="line">--output ./apiDoc <span class="string">\</span>                                       </span><br><span class="line"><span class="comment">#忽略.m文件，因.m中均为私有api和属性，开源的接口文档中理应忽略掉</span></span><br><span class="line">-i *.m <span class="string">\</span>                                                         </span><br><span class="line"><span class="comment">#工程的名字</span></span><br><span class="line">--project-name <span class="string">"GSecretKey"</span> <span class="string">\</span></span><br><span class="line"><span class="comment">#公司的名字</span></span><br><span class="line">--project-company <span class="string">"com.Gome"</span> <span class="string">\</span></span><br><span class="line"><span class="comment">#不生成docset，直接输出html</span></span><br><span class="line">--<span class="literal">no</span>-create-docset <span class="string">\</span></span><br><span class="line"><span class="comment">#没有注释的文件也输出html  --&gt;目的是看到所有的文件</span></span><br><span class="line">--keep-undocumented-objects <span class="string">\</span></span><br><span class="line"><span class="comment">#没有注释的属性和方法也输出到html  --&gt;目的是看到所有的属性和方法</span></span><br><span class="line">--keep-undocumented-members <span class="string">\</span></span><br><span class="line"><span class="comment">#没有注释的文件不提示警告</span></span><br><span class="line">--<span class="literal">no</span>-warn-undocumented-object <span class="string">\</span></span><br><span class="line"><span class="comment">#没有注释的属性和方法不提示警告</span></span><br><span class="line">--<span class="literal">no</span>-warn-undocumented-member <span class="string">\</span></span><br><span class="line"><span class="comment">#需要输出的文件路径  --&gt;这里推荐最好直接为当前工程路径平级输出，便于维护和使用</span></span><br><span class="line">./</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>实际使用上问题挺多，尤其Xcode9之后，普遍的方法会出现此错误：ERROR | !&gt; xcrun: error: unable to find utility “docsetutil”, not a developer tool or in PATH</p></blockquote><p>解决办法：终端-&gt;编写脚本-&gt;运行脚本-&gt;更新脚本从而规避docsetutil找不到等错误，经过验证，将命令放在脚本中，确实解决了这个问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><div id="refer">参考</div></h2><ol><li><a href="https://www.jianshu.com/p/f5cb3c728a5b" rel="external nofollow noopener noreferrer" target="_blank">iOS 开发_编写接口文档（appledoc实用篇）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;第一步，下载appledoc，安装：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>ABTest IOS SDK设计</title>
    <link href="http://yoursite.com/wiki/IOS/ABTest/ABTest/ABTest/"/>
    <id>http://yoursite.com/wiki/IOS/ABTest/ABTest/ABTest/</id>
    <published>2019-03-22T06:18:26.000Z</published>
    <updated>2019-05-13T11:14:26.611Z</updated>
    
    <content type="html"><![CDATA[<p>阅读目录：</p><ol><li><a href="#design">ABTest使用场景分析</a></li><li><a href="#sdk">SDK设计图</a></li><li><a href="#jd">附录：XX App AB效果</a></li></ol><h2 id="ABTest使用场景分析"><a href="#ABTest使用场景分析" class="headerlink" title="ABTest使用场景分析"></a><div id="design">ABTest使用场景分析</div></h2><p>下图说明ABTest使用场景的分析。</p><p><img src="/wiki/IOS/ABTest/ABTest/ABTest/ABL1.png" alt="流程解析"></p><p>依据上图的分析，设计出下面的SDK流程。</p><h2 id="SDK设计图"><a href="#SDK设计图" class="headerlink" title="SDK设计图"></a><div id="sdk">SDK设计图</div></h2><p>下图说明SDK的设计图。</p><p><img src="/wiki/IOS/ABTest/ABTest/ABTest/ABL2.png" alt="SDK设计图"></p><h2 id="附录：XX-App-AB效果"><a href="#附录：XX-App-AB效果" class="headerlink" title="附录：XX App AB效果"></a><div id="jd">附录：XX App AB效果</div></h2><p>经过反编译XX APP，分析XX客户端的AB实现原理，然后修改XX的代码，对比底部Bar的AB效果。</p><p><img src="/wiki/IOS/ABTest/ABTest/ABTest/JDA.PNG" alt="A"><br><img src="/wiki/IOS/ABTest/ABTest/ABTest/JDB.jpeg" alt="B"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#design&quot;&gt;ABTest使用场景分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sdk&quot;&gt;SDK设计图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jd&quot;&gt;附录：XX App AB效果&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
      <category term="ABTest" scheme="http://yoursite.com/categories/IOS/ABTest/"/>
    
      <category term="ABTest" scheme="http://yoursite.com/categories/IOS/ABTest/ABTest/"/>
    
    
      <category term="ABTest" scheme="http://yoursite.com/tags/ABTest/"/>
    
  </entry>
  
  <entry>
    <title>24. 自动引用计数器</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/24__%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/24__自动引用计数器/</id>
    <published>2019-01-30T03:07:12.000Z</published>
    <updated>2019-01-30T10:28:17.979Z</updated>
    
    <content type="html"><![CDATA[<p>官方目录：</p><ol><li>How ARC Works</li><li>ARC in Action</li><li>Strong Reference Cycles Between Class Instances</li><li>Resolving Strong Reference Cycles Between Class Instances</li><li>Strong Reference Cycles for Closures</li><li>Resolving Strong Reference Cycles for Closures</li></ol><a id="more"></a><p>引用计数只适用于实例对象。结构体和枚举是值类型，不是引用类型，并且不通过引用存储和传递的。</p><h2 id="ARC-⼯作机制"><a href="#ARC-⼯作机制" class="headerlink" title="ARC ⼯作机制"></a>ARC ⼯作机制</h2><h2 id="解决实例之间的强引用循环"><a href="#解决实例之间的强引用循环" class="headerlink" title="解决实例之间的强引用循环"></a>解决实例之间的强引用循环</h2><p>Swift 提供了两种方法解决你在使用类的属性而产生的强引用循环:弱引用( weak )和 无主引用( unowned )。</p><p>当一个实例的生命周期比较引用它的实例短，也就是这个实例可能会先于引用它的实例释放 的时候，需要使用弱引用( weak )。对与一栋公寓来说在它的生命周期中是完全可以没 有住户的，所以在这种情况下，上例中 Apartment 类使用弱引用来打断强引用循环是合 适的。相反，当一个实例拥有和引用它的实例相同的生命周期或是比引用它的实例更长的生 命周期的时候，需要使用无主引用( unowned )。</p><p>由于弱引用需要能在运行过程中设置为 nil ,所以必需要声明为可选类型的变量而不是常量。</p><blockquote><p>注意当 ARC 设置弱引用为 nil 的时候，属性观察不会被调用。</p></blockquote><p>无主引用总是有值的。因而，ARC也不会将无主引用的值设置为 nil ，这也意味着无主 引用要被定义为非可选类型。</p><h2 id="解决闭包引起的强引⽤循环"><a href="#解决闭包引起的强引⽤循环" class="headerlink" title="解决闭包引起的强引⽤循环"></a>解决闭包引起的强引⽤循环</h2><p>捕获列表定义了在闭包内部捕获一个或多个引用类型的规则</p><p>捕获列表中的每一项都是由 weak 或 unowned 关键字和实例的引用(如 self ) 或是由其他值初始化的变量(如 delegate = self.delegate! )成组构成的。它们每 一组都写在方括号中，组之间用逗号隔开。<br>捕获列表放在闭包的参数和返回值(如果有返回值的话)前面:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazy var someClosure: (Int, <span class="built_in">String</span>) -&gt; <span class="built_in">String</span> = &#123;</span><br><span class="line">    [unowned <span class="keyword">self</span>, weak delegate = <span class="keyword">self</span>.delegate!] (index: Int, stringToProcess: <span class="built_in">String</span>) -&gt; <span class="built_in">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// closure body goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How ARC Works&lt;/li&gt;
&lt;li&gt;ARC in Action&lt;/li&gt;
&lt;li&gt;Strong Reference Cycles Between Class Instances&lt;/li&gt;
&lt;li&gt;Resolving Strong Reference Cycles Between Class Instances&lt;/li&gt;
&lt;li&gt;Strong Reference Cycles for Closures&lt;/li&gt;
&lt;li&gt;Resolving Strong Reference Cycles for Closures&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="自动引用计数器" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>23. 泛型</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/23__%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/23__泛型/</id>
    <published>2019-01-29T03:07:12.000Z</published>
    <updated>2019-01-30T07:29:45.819Z</updated>
    
    <content type="html"><![CDATA[<p>官方目录：</p><ol><li>The Problem That Generics Solve</li><li>Generic Functions</li><li>Type Parameters</li><li>Naming Type Parameters</li><li>Generic Types</li><li>Extending a Generic Type</li><li>Type Constraints</li><li>Associated Types</li><li>Generic Where Clauses</li><li>Extensions with a Generic Where Clause</li><li>Associated Types with a Generic Where Clause</li><li>Generic Subscripts</li></ol><a id="more"></a><h2 id="泛型解决的问题"><a href="#泛型解决的问题" class="headerlink" title="泛型解决的问题"></a>泛型解决的问题</h2><p>泛型解决某些功能，例如交换两个数，由于参数类型不同，需要重复编写代码的问题。</p><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func swapTwoValues&lt;T&gt;(_ <span class="selector-tag">a</span>: inout T, _ <span class="selector-tag">b</span>: inout T) &#123;</span><br><span class="line">let temporaryA = <span class="selector-tag">a</span> </span><br><span class="line">a=b</span><br><span class="line"><span class="selector-tag">b</span> = temporaryA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型版本的函数使用占位符类型名，而不是一个真正的类型名称。调用泛型函数的时候，从实参中推断类型T。</p><h2 id="类型参数"><a href="#类型参数" class="headerlink" title="类型参数"></a>类型参数</h2><p><strong>类型参数</strong>指定并命名一个占位类型，<strong>并紧挨着函数名称后面</strong>，使用一对尖括号括起来(例如 <t> )。类型参数在调用时被一个真实的类型所替换。你可以通过在尖括号内写多个类型参数名来提供多个类型参数，用逗号隔开。</t></p><blockquote><p>类型参数：将类型作为参数</p></blockquote><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><p>除了泛型函数外，Swift可以定义你自己的泛型类型 。这些自定义的类、结构体、枚举可以和任何类型一起使用，方式类似于数组、字典 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = [<span class="type">Element</span>]()</span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> item: Element)</span></span> &#123;</span><br><span class="line">items.append(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">Element</span> &#123;</span><br><span class="line"><span class="keyword">return</span> items.removeLast()</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展泛型类型"><a href="#扩展泛型类型" class="headerlink" title="扩展泛型类型"></a>扩展泛型类型</h2><p>扩展泛型类型时，你不需要提供<strong>类型参数列表</strong>作为扩展定义的一部分。 相反，原始<strong>类型定义</strong>中的类型参数列表在扩展的主体内依旧可用，并且原始类型参数名称会被用于引用原始定义中的类型参数。</p><h2 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h2><p>有时候，对泛型函数和泛型类型进行类型约束是很有用的。类型约束指定参数类型必须继承自特定的类、遵循特定的协议、特定的协议组。</p><p>###类型约束语法</p><p>类型约束的写法:在类型参数名后跟上一个类或协议来进行约束，使用冒号进行分割，作为类型参数列表的一部分。泛型函数的类型约束语法如下(泛型类型的语法与此相同)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class="params">(someT: T, someU: U)</span></span> &#123;</span><br><span class="line"><span class="comment">// 这⾥里里写函数体的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个类型参数<code>T</code>，类型约束要求<code>T</code>的类型必须是<code>SomeClass</code>的子类。第二个类型参数<code>U</code>，类型约束要求<code>U</code>必须遵循<code>SomeProtocol</code>协议</p><h3 id="为啥需要类型约束？"><a href="#为啥需要类型约束？" class="headerlink" title="为啥需要类型约束？"></a>为啥需要类型约束？</h3><p>想想字典的key，必须可哈希，不是所有的类型都能作为字典的key，所以需要约束。</p><h2 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h2><p>当定义一个协议时，有时候定义一个或多个关联类型作为协议的一部分是很有用的。<strong>关联类型</strong>作为协议的一部分，并为一种类型提供占位符名称。在实现该协议之前不会指定关联类型的实际类型。关联类型使用 associatedtype 关键字来指定。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">associatedtype <span class="type">Item</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: Item)</span></span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">Item</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>item 可以通过类型推断得到。或者显式的指定：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> Item = <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><h3 id="将约束添加到关联类型"><a href="#将约束添加到关联类型" class="headerlink" title="将约束添加到关联类型"></a>将约束添加到关联类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">associatedtype <span class="type">Item</span>: <span class="type">Equatable</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: Item)</span></span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">Item</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了遵循这个版本的 Container ，容器的 Item 类型必须符合 <code>Equatable</code> 协议。</p><h2 id="泛型-Where-⼦句"><a href="#泛型-Where-⼦句" class="headerlink" title="泛型 Where ⼦句"></a>泛型 Where ⼦句</h2><p>对关联类型定义一些规定通常也很有用。你可以通过<strong>定义泛型where子句</strong> 来完成此操作。泛型 where 子句使你能够要求关联类型必须符合某个协议，或者某些类型参数和相关类型必须相同。泛型 where子句以where 关键字开头，后跟关联类型的约束条件或类型和关联类型之间的相等关系。</p><p>where的位置：你需要在一个类型或函数体的起始大括号之前写一个泛型where子句。</p><h3 id="在扩展中使⽤泛型Where⼦句"><a href="#在扩展中使⽤泛型Where⼦句" class="headerlink" title="在扩展中使⽤泛型Where⼦句"></a>在扩展中使⽤泛型Where⼦句</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">associatedtype</span> <span class="keyword">Iterator: </span><span class="keyword">IteratorProtocol </span>where <span class="keyword">Iterator.Element </span>== <span class="keyword">Item</span></span><br></pre></td></tr></table></figure><h2 id="泛型下标"><a href="#泛型下标" class="headerlink" title="泛型下标"></a>泛型下标</h2><p>标也可以用泛型表示，同时也可以包含泛型 where 子句。 可以在下标括号之后的尖括号内写一个类型占位符，在下标主体的起始大括号之前写一个泛型 where子句。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Problem That Generics Solve&lt;/li&gt;
&lt;li&gt;Generic Functions&lt;/li&gt;
&lt;li&gt;Type Parameters&lt;/li&gt;
&lt;li&gt;Naming Type Parameters&lt;/li&gt;
&lt;li&gt;Generic Types&lt;/li&gt;
&lt;li&gt;Extending a Generic Type&lt;/li&gt;
&lt;li&gt;Type Constraints&lt;/li&gt;
&lt;li&gt;Associated Types&lt;/li&gt;
&lt;li&gt;Generic Where Clauses&lt;/li&gt;
&lt;li&gt;Extensions with a Generic Where Clause&lt;/li&gt;
&lt;li&gt;Associated Types with a Generic Where Clause&lt;/li&gt;
&lt;li&gt;Generic Subscripts&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="泛型" scheme="http://yoursite.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>20. 嵌套类型</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/20__%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/20__嵌套类型/</id>
    <published>2019-01-29T02:07:12.000Z</published>
    <updated>2019-01-29T03:58:49.024Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Nested Types in Action</li><li>Referring to Nested Types</li></ol><a id="more"></a><p> 通常我们会创建枚举来支持特定的类或结构体的功能。类似地，为了可以方便地定义在更复杂类型上下文中使用的实用 工具类和结构，Swift 允许你定义 嵌套类型 ，从而实现在枚举、类和结构体中的定义嵌套类型。</p><p>如果要将一个类型嵌套在另一个类型中，只需在支持类型的大括号内定义嵌套类型即可。类型支持多层嵌套。</p><h2 id="嵌套类型的使用"><a href="#嵌套类型的使用" class="headerlink" title="嵌套类型的使用"></a>嵌套类型的使用</h2><h2 id="引⽤嵌套类型"><a href="#引⽤嵌套类型" class="headerlink" title="引⽤嵌套类型"></a>引⽤嵌套类型</h2><p>要在其定义上下文之外使用嵌套类型，需要在其名称前面加上嵌套在其中的类型的名称。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Nested Types in Action&lt;/li&gt;
&lt;li&gt;Referring to Nested Types&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="嵌套类型" scheme="http://yoursite.com/tags/%E5%B5%8C%E5%A5%97%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>19. 类型转换</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/19__%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/19__类型转换/</id>
    <published>2019-01-29T02:07:12.000Z</published>
    <updated>2019-01-29T03:55:37.511Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Defining a Class Hierarchy for Type Casting</li><li>Checking Type</li><li>Downcasting</li><li>Type Casting for Any and AnyObject</li></ol><a id="more"></a><p>Swift 中的类型转换是通过 is 和 as 运算符实现的。 这两个运算符提供了一种简单 而直观的方法来检查值的类型，或将值转换为其他类型。</p><h2 id="定义一个类结构作为类型转换示例"><a href="#定义一个类结构作为类型转换示例" class="headerlink" title="定义一个类结构作为类型转换示例"></a>定义一个类结构作为类型转换示例</h2><p>你可以使用类型转换连同类和子类的层次结构来检查特定类的实例类型，并将该实例强制转 换为同一层次结构中的另一个类。</p><h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><p>使用 类型检查运算符( is )来检查实例是否属于某个特定子类型。 如果实例属于该子类型，则类型检查运算符将返回 true ，否则，将返回 false 。</p><h2 id="强制转型"><a href="#强制转型" class="headerlink" title="强制转型"></a>强制转型</h2><p>实际上某个类型的常量或变量可能本来就是某个子类的实例。当确认是这种情况情况时，你 可以尝试使用 类型强制转换运算符 ( as? 或 as! )将该常量或变量 强制转换 成子 类型。</p><p>由于强制转换可能会失败，因该类型转换运算符有两种不同的形式。条件形式 as? 会返 回你尝试强制转换的类型的可选值。强制形式 as! 则会尝试强制转换，并同时将结果强 制解包。</p><p>当你不确定强制转换是否成功时，请使用类型转换运算符的条件形式( as? )。这种形 式的运算符将始终返回一个可选值，如果无法进行强制转换，该值将为 nil 。这使得你 可以检查强制转换是否成功。<br>仅当你确定强制转换会始终成功时，才使用类型转换运算符的强制形式( as! )。如果 你尝试强制转换为不正确的类型，此形式的运算符将触发运行时错误。</p><blockquote><p>转换实际上不会变更实例或修改其值。原本的实例保持不变;我们仅仅把它看作是它类型的实例，对其进行简单地处理和访问。</p></blockquote><h2 id="对Any和AnyObject做类型转换"><a href="#对Any和AnyObject做类型转换" class="headerlink" title="对Any和AnyObject做类型转换"></a>对Any和AnyObject做类型转换</h2><p>Swift 提供了两种特殊的类型来处理非特定类型:</p><ol><li>Any 可以表示任何类型的实例，包括函数类型。 </li><li>AnyObject 可以表示任何类类型的实例。</li></ol><p>只有在明确需要 Any 或 AnyObject 所提供的行为和功能时才使用他们。 最好在你 的代码中明确需要使用的类型。</p><blockquote><p>注意<br>Any 类型表示任何类型的值，包括可选类型。 如果程序需要一个类型为 Any 的 值，而你却使用了可选类型，Swift 会向你发出警告。 如果你确实需要将可选值作为Any 使用，可以使用 as 操作符将可选类型显式地转换为 Any 类型，如下所 示。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let optionalNumber: <span class="keyword">Int</span>? = <span class="number">3</span> things.<span class="keyword">append</span>(optionalNumber) <span class="comment">// 警告 </span></span><br><span class="line">things.<span class="keyword">append</span>(optionalNumber as <span class="keyword">Any</span>) <span class="comment">// 没有警告</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Defining a Class Hierarchy for Type Casting&lt;/li&gt;
&lt;li&gt;Checking Type&lt;/li&gt;
&lt;li&gt;Downcasting&lt;/li&gt;
&lt;li&gt;Type Casting for Any and AnyObject&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="类型转换" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>21. 扩展</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/21__%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/21__扩展/</id>
    <published>2019-01-29T02:07:12.000Z</published>
    <updated>2019-01-29T07:07:06.729Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Extension Syntax</li><li>Computed Properties</li><li>Initializers</li><li>Methods</li><li>Subscripts</li><li>Nested Types</li></ol><a id="more"></a><p> Extensions :为已存在的类、结构体、枚举或者协议类型增添了一个新的功能。这项功 能包括在对你无法访问源码的情况下进行类的扩展的能力(例如“追溯模型”)。Swift 中的Extensions 与 Objective-C 中的 Categories 类似。(但与 Objective-C 中 Categories 有所不同的是，Swift 中的 Extensions 并没有一个具体的命名)<br>在 Swift 中 Extensions 可以做到:</p><ol><li>添加计算实例属性和计算类型属性</li><li>定义实例方法和类方法</li><li>提供新的初始化方法</li><li>定义下标脚本</li><li>定义和使用新的嵌套类型</li><li>使现有类型符合协议</li></ol><blockquote><p>注意: Extensions 可以为类增添一个新的功能，但却不能重写之前已经存在的功能。</p></blockquote><h2 id="Extension-语法"><a href="#Extension-语法" class="headerlink" title="Extension 语法"></a>Extension 语法</h2><p>使用关键字 Extension 来声明一个扩展:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeType</span> </span>&#123;</span><br><span class="line"><span class="comment">//编写 SomeType 的新功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果你想为一个已经存在的类型的进行扩展并添加一个新的功能，那么这个功能将会被 该类所有的实例使用，即使在这个 Extension 被定义之前。</p></blockquote><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>Extensions 可以将计算实例属性与计算类型属性添加到现有类中去。</p><blockquote><p>注意：Extensions 可以添加一个新的属性，但是他们不能存储这些属性，也不能为现有类 型添加属性观察者。</p></blockquote><h2 id="初始化器"><a href="#初始化器" class="headerlink" title="初始化器"></a>初始化器</h2><p>Extensions 可以给类添加一个便利初始化器，但它们不能够提供指定初始化器、反初始化器。指定初始化器和反初始化器都必须由原始类去提供。</p><blockquote><p>注意： 如果你声明了一个带有扩展的新的初始化器，那么你仍然有责任去确认在这个初始化器完成之后，每一个实例都已经被初始化完成。</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>扩展可以向已经存在的类型添加实例方法或类方法。</p><h3 id="可变实例方法"><a href="#可变实例方法" class="headerlink" title="可变实例方法"></a>可变实例方法</h3><p> 我们可以通过在扩展中添加实例方法来实现修改变量。</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p> Extensions 能够对已经存在的类型添加下标。</p><h2 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h2><p>我们可以通过扩展 Extensions 来向任何已经存在的类、结构体或枚举添加新的嵌套类 型。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Extension Syntax&lt;/li&gt;
&lt;li&gt;Computed Properties&lt;/li&gt;
&lt;li&gt;Initializers&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;Subscripts&lt;/li&gt;
&lt;li&gt;Nested Types&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="扩展" scheme="http://yoursite.com/tags/%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>22. 协议</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/22__%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/22__协议/</id>
    <published>2019-01-29T02:07:12.000Z</published>
    <updated>2019-01-29T10:59:08.348Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Protocol Syntax</li><li>Property Requirements</li><li>Method Requirements</li><li>Mutating Method Requirements</li><li>Initializer Requirements</li><li>Protocols as Types</li><li>Delegation</li><li>Adding Protocol Conformance with an Extension</li><li>Collections of Protocol Types</li><li>Protocol Inheritance</li><li>Class-Only Protocols</li><li>Protocol Composition</li><li>Checking for Protocol Conformance</li><li>Optional Protocol Requirements</li><li>Protocol Extensions</li></ol><a id="more"></a><p><strong>协议</strong>可以作为方法、属性或者其他的一些特定的任务和功能块的设计蓝图。协议可以适用于类、结构体、枚举,并为它们提供具体的实现或满足特定的需求。任意类型只要满足一个协议的要求，那么我们便称这个类型<strong>遵循</strong>这个协议。</p><p>除了要求遵循协议的类型必须提供对应的实现以外，还可以通过<strong>协议扩展</strong>来为协议的遵循者提供默认的或者对其有利的实现。</p><h2 id="协议语法"><a href="#协议语法" class="headerlink" title="协议语法"></a>协议语法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 协议的定义写在这⾥</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span>: FirstProtocol, AnotherProtocol </span>&#123; </span><br><span class="line"><span class="comment">// 结构体的定义写在这⾥</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在为子类适配协议时，父类的名称需要写在协议名之前，分隔符不变。</p><h2 id="属性要求"><a href="#属性要求" class="headerlink" title="属性要求"></a>属性要求</h2><p>协议可以要求遵循者提供特定名称的实例属性、类型属性。协议只指定属性的名称和类型，而不指定属性是储存属性还是计算属性。此外，协议中也可以指定属性是可读的还是可读可写的。</p><p><strong>协议可以指定属性的名称、类型、读写性</strong></p><p>协议属性通常会以var关键字来声明变量属性。在类型声明后加上<code>{ get set }</code>来表示属性是可读可写的，用<code>{ get }</code>来表示可读属性。</p><p>在协议中定义<strong>类型属性</strong>时，始终使用static关键字作为前缀。即使该<strong>类型属性</strong>在类实现时以以 class 或 static 关键字作为前缀，这个规则也适用。</p><h2 id="方法要求"><a href="#方法要求" class="headerlink" title="方法要求"></a>方法要求</h2><p>我们无法为协议中定义的方法的参数指定默认值。</p><p>与<strong>类型属性</strong>一样，当在协议中定义<strong>类型方法</strong>时，始终使用static 关键字作为前缀。即使该类型方法要求在由类实现时以 class 或 static 关键字为前缀，也是如此。</p><h2 id="异变方法要求"><a href="#异变方法要求" class="headerlink" title="异变方法要求"></a>异变方法要求</h2><blockquote><p>注意：如果将协议实例方法要求标记为mutating，则在为类编写该方法的实现时，不需要写<code>mutating</code>关键字。 mutating关键字仅由结构体和枚举使用。</p></blockquote><h2 id="构造器要求"><a href="#构造器要求" class="headerlink" title="构造器要求"></a>构造器要求</h2><p>协议可能要求通过遵循类型来实现<strong>指定构造器</strong>。和普通构造器写法一样，你可以将构造器定义写在协议中，只是不用写大括号和构造器实现。</p><h3 id="类实现协议构造器的要求"><a href="#类实现协议构造器的要求" class="headerlink" title="类实现协议构造器的要求"></a>类实现协议构造器的要求</h3><p>你可以通过实现指定构造器、便利构造器来使遵循协议的类满足协议的构造器要求。在这两种情况下，你必须使用 required 修饰符标记构造器实现。</p><h3 id="可失败的构造器的要求"><a href="#可失败的构造器的要求" class="headerlink" title="可失败的构造器的要求"></a>可失败的构造器的要求</h3><p>遵循类型可以用可失败或非可失败的构造器来满足可失败的构造器要求。非可失败的构造器要求必须用非可失败的构造器或隐式展开的可失败的构造器来满足。</p><h2 id="将协议作为类型"><a href="#将协议作为类型" class="headerlink" title="将协议作为类型"></a>将协议作为类型</h2><p>协议本身并不实现任何功能。不过，你创建的任何协议都可以变为一个功能完备的类型在代码中使用。因为它是一种类型，所以你可以在允许其他类型的许多地方使用协议，包括:</p><ol><li>作为函数、方法或构造器的参数类型或返回类型</li><li>作为常量、变量或属性的类型</li><li>作为数组、字典或其他容器的元素类型</li></ol><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托是一种设计模式，它使类或结构体能够将其某些职责交给(或委托)到另一种类型的实例。通过定义封装委托职责的协议来实现此设计模式，从而保证遵循协议的类型(称为委托)提供被委托的功能。</p><h2 id="扩展添加遵循某协议"><a href="#扩展添加遵循某协议" class="headerlink" title="扩展添加遵循某协议"></a>扩展添加遵循某协议</h2><pre><code>extension Dice: TextRepresentable {    var textualDescription: String {        return &quot;A \(sides)-sided dice&quot;    }}</code></pre><h3 id="有条件地遵循协议"><a href="#有条件地遵循协议" class="headerlink" title="有条件地遵循协议"></a>有条件地遵循协议</h3><p>泛型类型可能只能在特定条件下满足协议的要求，例如类的泛型参数遵循一个协议。你可以通过在扩展类型时列出条件约束，让泛型类型有条件的遵循一个协议。通过编写一个泛型where分句，在遵循的协议名称后面写上约束条件。</p><h3 id="通过扩展申明类采纳了协议"><a href="#通过扩展申明类采纳了协议" class="headerlink" title="通过扩展申明类采纳了协议"></a>通过扩展申明类采纳了协议</h3><p>如果一个类型已经满足遵循一个协议的所有要求，但它没有申明遵循了这个协议，你可以通过一个空的扩展遵循该协议。</p><blockquote><p>注意：类型不会自动遵循一个协议，即便已经满足这个协议的要求。它们必须显示的申明它们遵循了这个协议。</p></blockquote><h2 id="协议类型的集合"><a href="#协议类型的集合" class="headerlink" title="协议类型的集合"></a>协议类型的集合</h2><p>协议可以用作诸如数组或字典之类的集合类型的元素类型。</p><h2 id="协议继承"><a href="#协议继承" class="headerlink" title="协议继承"></a>协议继承</h2><p>协议可以继承一个或多个协议，并且可以在其继承的协议的基础上添加更多的要求。协议继承的语法类似于类继承的语法，但是协议继承支持同时继承多个协议，并用逗号隔开。</p><h2 id="类的专属协议"><a href="#类的专属协议" class="headerlink" title="类的专属协议"></a>类的专属协议</h2><p>你可以通过将<code>AnyObject</code>协议添加到协议的继承列表中，来将协议限定为仅类类型(而不是结构体或枚举)可用。</p><blockquote><p>注意： 当协议的要求遵循者必须符合引用语义而不是值语义时，请使用<strong>类专属协议</strong>。</p></blockquote><h2 id="协议组合"><a href="#协议组合" class="headerlink" title="协议组合"></a>协议组合</h2><p>某些场合下，要求类型可以同时遵循多个协议是很有用的。您可以使用<strong>协议组合</strong>将多个协议组合到单个需求中。协议组合的行为就像你定义了一个临时本地协议，该协议具有组合中所有协议的要求。协议组合不定义任何新的协议类型。</p><p>协议组合使用<code>SomeProtocol &amp; AnotherProtocol</code>的形式。你可以根据需要，列出尽可能多的协议，用&amp;符号分隔它们。除了协议列表之外，协议组合还可以包含一个类类型，你可以使用它来指定继承的父类。</p><h2 id="检查协议的遵循情况"><a href="#检查协议的遵循情况" class="headerlink" title="检查协议的遵循情况"></a>检查协议的遵循情况</h2><p>你可以使用<strong>类型转换</strong>中描述的 is 和 as 运算符来检查协议遵循、转换成特定协议。检查和转换协议与检查和转换类型的语法相同:</p><ol><li>如果实例遵循协议，则is运算符返回true ，如果不遵循则返回false 。</li><li>向下转换运算符as?返回协议类型的可选值，如果实例不遵循该协议，则该值为nil 。</li><li>向下转换运算符的as!强制向下转换为协议类型，如果向下转换不成功则触发运行时错误。</li></ol><h2 id="可选协议要求"><a href="#可选协议要求" class="headerlink" title="可选协议要求"></a>可选协议要求</h2><p>你可以为协议定义可选要求，这些要求不强制遵循者必须实现。可选要求以 optional修饰符为前缀，作为协议定义的一部分。</p><p>可选要求允许你的代码与Objective-C交互。协议和可选要求都必须用@objc 属性标记。请注意：@objc协议只能由继承自Objective-C类或其他@objc类的类遵循。结构体或枚举不能遵循它们。</p><p>在可选要求中使用方法或属性时，其类型将自动变为可选。例如，类型 (Int) -&gt;String 的方法变为 ((Int) -&gt; String)? 。请注意：整个函数类型变成了可选项， 而不是方法的返回值。</p><p>考虑到遵循协议的类型可能未实现要求，你应该使用可选链来调用可选协议。你通过在调用方法名称后面写一个问号来检查可选方法是否实现，例如 <code>someOptionalMethod? (someArgument)</code> 。</p><h2 id="协议扩展–协议上创建扩展"><a href="#协议扩展–协议上创建扩展" class="headerlink" title="协议扩展–协议上创建扩展"></a>协议扩展–协议上创建扩展</h2><p><font color="blue">通过在协议上创建扩展</font>，所有遵循者都将自动获得此方法的实现，而无需任何其他修改。</p><p>协议扩展可以为符合协议的类型添加实现，但无法扩展协议本身或是继承其他协议。 协议继承始终在协议自身的声明中指定。</p><h3 id="提供默认实现"><a href="#提供默认实现" class="headerlink" title="提供默认实现"></a>提供默认实现</h3><p>你可以使用<strong>协议扩展</strong>来为任何方法或计算属性提供默认实现。如果一个遵循者本身就实现了协议中要求的方法或属性，那么这个实现会代替协议扩展中的默认实现。</p><p>注意：由协议扩展提供默认实现和可选协议不同。尽管符合的类型不需要提供任何一种协议的实现，但默认的实现在被调用时不需要可选链。</p><h3 id="为协议扩展添加条件约束"><a href="#为协议扩展添加条件约束" class="headerlink" title="为协议扩展添加条件约束"></a>为协议扩展添加条件约束</h3><p>当我们定义一个协议扩展时，我们可以通过where关键字在被扩展的协议名称后指定一个约束条件。</p><blockquote><p>注意：如果一个类型遵循了多个具有同名方法或属性的扩展协议，那么 Swift会优先调用约束条件较多一方的属性或方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Protocol Syntax&lt;/li&gt;
&lt;li&gt;Property Requirements&lt;/li&gt;
&lt;li&gt;Method Requirements&lt;/li&gt;
&lt;li&gt;Mutating Method Requirements&lt;/li&gt;
&lt;li&gt;Initializer Requirements&lt;/li&gt;
&lt;li&gt;Protocols as Types&lt;/li&gt;
&lt;li&gt;Delegation&lt;/li&gt;
&lt;li&gt;Adding Protocol Conformance with an Extension&lt;/li&gt;
&lt;li&gt;Collections of Protocol Types&lt;/li&gt;
&lt;li&gt;Protocol Inheritance&lt;/li&gt;
&lt;li&gt;Class-Only Protocols&lt;/li&gt;
&lt;li&gt;Protocol Composition&lt;/li&gt;
&lt;li&gt;Checking for Protocol Conformance&lt;/li&gt;
&lt;li&gt;Optional Protocol Requirements&lt;/li&gt;
&lt;li&gt;Protocol Extensions&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="协议" scheme="http://yoursite.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>17. 可选链</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/17__%E5%8F%AF%E9%80%89%E9%93%BE/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/17__可选链/</id>
    <published>2019-01-28T02:07:12.000Z</published>
    <updated>2019-01-28T10:09:02.556Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Optional Chaining as an Alternative to Forced Unwrapping</li><li>Defining Model Classes for Optional Chaining</li><li>Accessing Properties Through Optional Chaining</li><li>Calling Methods Through Optional Chaining</li><li>Accessing Subscripts Through Optional Chaining</li><li>Linking Multiple Levels of Chaining</li><li>Chaining on Methods with Optional Return Values</li></ol><a id="more"></a><p>可选链 是在当前可能为 nil的可选值上查询和调用属性、方法、下标的过程。如果可选值有值，则属性、方法或下标调用成功;如果可选值为 nil ，则属性、方法或下标调用 返回 nil 。多个查询可以链接在一起，如果链中的任何一个节点为 nil ，整个链会 返回失败。</p><h2 id="可选链作为强制展开的代替品"><a href="#可选链作为强制展开的代替品" class="headerlink" title="可选链作为强制展开的代替品"></a>可选链作为强制展开的代替品</h2><p>为了反映可选链可以对 nil 值进行调用这一事实，可选链调用的结果总是一个可选值， 即使正在查询的属性、方法或下标返回一个不可选值。</p><h2 id="为可选链定义模型类"><a href="#为可选链定义模型类" class="headerlink" title="为可选链定义模型类"></a>为可选链定义模型类</h2><p>你可以使用可选链来调用超过一级深度的属性、方法和下标。 这使你可以深入查看相互关联 类型的复杂模型中的子属性，并检查是否可以访问这些子属性上的属性、方法和下标。</p><h2 id="通过可选链访问属性"><a href="#通过可选链访问属性" class="headerlink" title="通过可选链访问属性"></a>通过可选链访问属性</h2><p>赋值是可选链的一部分，也就意味着 = 操作符的右操作数不会被计算。</p><p>任何通过可选链给属性赋值的尝试都会返回一个 Void? 类型的值。这样你可以和 nil 比较来检查赋值是否成功:</p><h2 id="通过可选链调⽤方法"><a href="#通过可选链调⽤方法" class="headerlink" title="通过可选链调⽤方法"></a>通过可选链调⽤方法</h2><p>你可以使用可选链来调用一个可选值的方法，以及检查调用是否成功。即使那个方法没有返回值你依然可以这样做。</p><h2 id="通过可选链访问下标"><a href="#通过可选链访问下标" class="headerlink" title="通过可选链访问下标"></a>通过可选链访问下标</h2><h2 id="访问可选类型的下标"><a href="#访问可选类型的下标" class="headerlink" title="访问可选类型的下标"></a>访问可选类型的下标</h2><p>如果下标返回一个可选类型的值，例如 Swift 中 Dictionary 的键下标，在下标的右括 号 后面 放置一个问号来链接其可选的返回值</p><h2 id="多级链表关联"><a href="#多级链表关联" class="headerlink" title="多级链表关联"></a>多级链表关联</h2><ol><li>如果要检索的类型不是可选的，通过可选链，它将成为可选的。</li><li>如果您要检索的类型已经是可选的，那么它将保持原状。</li></ol><h2 id="在方法的可选返回值上进行可选链式调用"><a href="#在方法的可选返回值上进行可选链式调用" class="headerlink" title="在方法的可选返回值上进行可选链式调用"></a>在方法的可选返回值上进行可选链式调用</h2><p>如果要在该方法的返回值上进行可选链式调用，在方法的圆括号后面加上问号即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Optional Chaining as an Alternative to Forced Unwrapping&lt;/li&gt;
&lt;li&gt;Defining Model Classes for Optional Chaining&lt;/li&gt;
&lt;li&gt;Accessing Properties Through Optional Chaining&lt;/li&gt;
&lt;li&gt;Calling Methods Through Optional Chaining&lt;/li&gt;
&lt;li&gt;Accessing Subscripts Through Optional Chaining&lt;/li&gt;
&lt;li&gt;Linking Multiple Levels of Chaining&lt;/li&gt;
&lt;li&gt;Chaining on Methods with Optional Return Values&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="可选链" scheme="http://yoursite.com/tags/%E5%8F%AF%E9%80%89%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>18. 错误处理</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/18__%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/18__错误处理/</id>
    <published>2019-01-28T02:07:12.000Z</published>
    <updated>2019-01-29T03:19:27.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Representing and Throwing Errors</li><li>Handling Errors</li><li>Specifying Cleanup Actions</li></ol><a id="more"></a><h2 id="表示和抛出错误"><a href="#表示和抛出错误" class="headerlink" title="表示和抛出错误"></a>表示和抛出错误</h2><p>在 Swift 中，错误是遵循 Error 协议的值。Error 是一个空协议，表明遵循该协议的类型 可以用于错误处理。</p><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>在 Swift 中有四种处理错误的方式：</p><ol><li>您可以将错误从函数传递给调用该函数的代码</li><li>可以使 用 do - catch 语句处理错误，</li><li>可以通过可选值处理错误</li><li>通过断言保证错误不会 发生</li></ol><h3 id="使⽤抛出函数传递错误"><a href="#使⽤抛出函数传递错误" class="headerlink" title="使⽤抛出函数传递错误"></a>使⽤抛出函数传递错误</h3><p>为了让函数、方法或者初始化程序可以抛出错误，您需要在函数声明的参数后面添写 throws 关键字。标有 throws 的函数称为抛出函数。如果函数指定了返回类型，则在返回箭头 ( -&gt; ) 之前添写 throws 关键字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canThrowErrors</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:只有抛出函数才能传递错误。任何在非抛出函数中抛出错误都必须在函数内部进行处理。</p></blockquote><h3 id="使⽤-Do-Catch-处理错误"><a href="#使⽤-Do-Catch-处理错误" class="headerlink" title="使⽤ Do-Catch 处理错误"></a>使⽤ Do-Catch 处理错误</h3><p>在可抛出函数中，封闭的do - catch 子句或调用者必须处理错误。 如果错误传播到顶级作用域而未被处理， 则会出现运行时错误。</p><h3 id="将错误转换为可选值"><a href="#将错误转换为可选值" class="headerlink" title="将错误转换为可选值"></a>将错误转换为可选值</h3><p>你可以使用 try? 将错误转换为可选值来处理错误。 如果在执行 try? 表达式时抛出 错误，表达式的值将为 nil 。</p><h3 id="禁⽤错误传播"><a href="#禁⽤错误传播" class="headerlink" title="禁⽤错误传播"></a>禁⽤错误传播</h3><p>有时你知道可抛出函数或方法实际上不会在运行时抛出错误。 在这种情况下，你可以在表达 式之前添加 try! 来禁用错误传播，并把调用过程包装在运行时断言中，从而禁止其抛出 错误。 而如果实际运行时抛出了错误，你将收到运行时错误。</p><h2 id="指定清理操作"><a href="#指定清理操作" class="headerlink" title="指定清理操作"></a>指定清理操作</h2><p>当代码执行到即将离开当前代码块之前，可以使用 defer 语句来执行一组语句。无论是 因为错误而离开 — 抑或是因为诸如 return 或 break 等语句而离开， defer 语句都可以让你执行一些必要的清理。例如，你可以使用 defer 语句来关闭文件描述符 或释放手动分配的内存。</p><p>defer 语句会推迟执行，直到退出当前作用域。该语句由 defer 关键字和稍后要执 行的语句组成。延迟语句可能不包含任何将控制转移出语句的代码，例如 break 或 return 语句，或抛出错误。延迟操作的执行顺序与它们在源代码中编写的顺序相反。也 就是说，第一个 defer 语句中的代码最后一个执行，第二个 defer 语句中的代码倒 数第二个执行，依此类推。源代码中的最后一个 defer 语句最先执行。</p><blockquote><p>注意： 即使没有涉及错误处理代码，也可以使用 defer 语句。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Representing and Throwing Errors&lt;/li&gt;
&lt;li&gt;Handling Errors&lt;/li&gt;
&lt;li&gt;Specifying Cleanup Actions&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="错误处理" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>15. 构造过程</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/15__%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/15__构造过程/</id>
    <published>2019-01-28T02:07:12.000Z</published>
    <updated>2019-01-28T08:39:18.573Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Setting Initial Values for Stored Properties</li><li>Customizing Initialization</li><li>Default Initializers</li><li>Initializer Delegation for Value Types</li><li>Class Inheritance and Initialization</li><li>Failable Initializers</li><li>Required Initializers</li><li>Setting a Default Property Value with a Closure or Function</li></ol><a id="more"></a><p>Swift 的构造器不用返回值。它们主要的作用就是确保在第一次使用前某类型 的实例都能正确的初始化。</p><h2 id="设置存储属性的初始值"><a href="#设置存储属性的初始值" class="headerlink" title="设置存储属性的初始值"></a>设置存储属性的初始值</h2><p>类和结构体在其创建实例时 必须 为它们所有的存储属性设置适当的初始值。存储属性不能处 于未知状态。<br>你可以在构造器中为存储属性设置初始值，或是作为定义属性时的一部分设置其默认值。</p><blockquote><p>注意：当你为存储属性设置默认值时，或是在构造器中设置其初始值，属性值是直接设置的，并不会调用任何属性观察器。</p></blockquote><h2 id="构造器器"><a href="#构造器器" class="headerlink" title="构造器器"></a>构造器器</h2><p>构造器在创建某类实例时调用。其最简单的形式用 init 数的实例方法</p><h2 id="默认属性值"><a href="#默认属性值" class="headerlink" title="默认属性值"></a>默认属性值</h2><p>你可以在构造器中设置一个存储属性的初始值。或指定一个 <code>默认属性值</code> 作为声明 属性的一部分。指定默认属性值你可以通过在属性定义时为其赋一个初始值。</p><blockquote><p>注意：如果一个属性总是相同的初始值，与其在构造器中设置一个值不如提供一个默认值。其效果是相同的，但是默认值与属性构造器的联系更紧密一些。它使构造器更简短，更清晰，并且可以通过默认值推断属性类型。默认值也使你更易使用默认构造器和构造器继承，</p></blockquote><h2 id="自定义构造过程"><a href="#自定义构造过程" class="headerlink" title="自定义构造过程"></a>自定义构造过程</h2><p>参数名：如果你在构造 器中没有为 每一个 参数提供外部参数名，Swift 就会自动为其提供外部参数名。</p><blockquote><p>注意如果不使用外部参数名是无法调用这些构造器的。如果在构造器中定义了外部参数名就必须使用，忽略它将会触发编译错误。</p></blockquote><h2 id="可选属性类型"><a href="#可选属性类型" class="headerlink" title="可选属性类型"></a>可选属性类型</h2><p>可选类型的属性会自动被初始化为 nil ，表示属性在构造过程期间故意设置为『没有 值』。</p><h2 id="在构造过程期间给常量赋值"><a href="#在构造过程期间给常量赋值" class="headerlink" title="在构造过程期间给常量赋值"></a>在构造过程期间给常量赋值</h2><p>构造过程期间你可以在任何时间点给常量属性赋值，只要构造完成时设置了确定值即可。一旦常量属性被赋值，就不能再次修改。</p><blockquote><p>注意：对于类的实例来说，常量属性只能在定义常量属性类的构造器中修改。不能在派生类中修改。</p></blockquote><h2 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h2><p>Swift 为属性均有默认值和没有构造器的结构体或类提供了一个 默认构造器 。默认构造器创 建了一个所有属性都有默认值的新实例。</p><h2 id="结构体类型的成员构造器器"><a href="#结构体类型的成员构造器器" class="headerlink" title="结构体类型的成员构造器器"></a>结构体类型的成员构造器器</h2><p>如果结构体没有任何自定义构造器，那么结构体类型会自动接收一个 成员构造器。不同于默 认构造器，即使结构体的存储属性没有默认值，它也会接收成员构造器。</p><h2 id="值类型的构造器器代理"><a href="#值类型的构造器器代理" class="headerlink" title="值类型的构造器器代理"></a>值类型的构造器器代理</h2><p>构造器可以调用其他构造器来执行实例的部分构造过程。这个过程称之为 构造器代理 ，以避免多个构造器之间的<strong>重复代码</strong>。</p><p>对于值类型，在自定义构造器中使用 self.init 来引用同一类型中的其他构造器。<strong>你只能在构造器中调用 self.init </strong>。</p><p>如果你为值类型定义了一个自定义构造器，你将无法再访问该类型的默认构造器( 如果是结 构体就是成员构造器 )</p><blockquote><p>注意：如果你想让你的自定义类型可以使用默认构造器，成员构造器，自定义构造器来进行初始化，就把自定义构造器写在扩展中，而不是作为值类型原始实现的一部分。</p></blockquote><h2 id="类的继承和构造过程"><a href="#类的继承和构造过程" class="headerlink" title="类的继承和构造过程"></a>类的继承和构造过程</h2><p>类的所有存储属性 — 包括任何从父类继承而来的属性 — 必须 在构造过程期间赋值。<br>Swift 给类类型定义了两种构造器以确保所有存储属性都能接收到初始值。它们分别是指定构造器和便利构造器。</p><h2 id="指定构造器和便利构造器"><a href="#指定构造器和便利构造器" class="headerlink" title="指定构造器和便利构造器"></a>指定构造器和便利构造器</h2><p>指定构造器是类的主要构造器。一个指定构造器初始化该类引入的所有属性，并调用合适的父类构造器以继续父类链上的构造过程。</p><p>便利构造器有着相同风格的写法，但是在 init 关键字之前需要放置 convenience 修饰符，并使用空格来分隔。</p><h2 id="类的构造代理"><a href="#类的构造代理" class="headerlink" title="类的构造代理"></a>类的构造代理</h2><p>为了简化指定构造器和便利构造器之间的关系。Swift 对构造器之间的代理采用了如下三条规则：</p><ol><li>指定构造器必须调用其直系父类的指定构造器。</li><li>便利构造器必须调用 同一 类中的其他构造器。</li><li>便利构造器最后必须调用指定构造器。</li></ol><p>简单的记忆方法:</p><ol><li>指定构造器必须 <strong>向上</strong> 代理。 </li><li>便利构造器必须 <strong>横向</strong> 代理。</li></ol><h2 id="两段式构造器过程"><a href="#两段式构造器过程" class="headerlink" title="两段式构造器过程"></a>两段式构造器过程</h2><p>Swift 中类的构造过程是两段式处理。第一阶段，为类引入的每个存储属性赋一个初始值。一旦确定了所有存储属性的初始状态，第二阶段开始，在新的实例被认为可以使用前，每个类都有机会进一步定制其存储属性。</p><p>Swift 的编译器执行了四个有帮助的安全检查以确保两段式构造过程无误完成: </p><ol><li>安全检查 1：指定构造器必须确保其类引入的所有属性在向上代理父类构造器之前完成初始化。如上所述，一个对象的内存只在其所有存储属性初始状态已知时才被认为完全初始化。为了符合此规则，指定构造器必须确保其所属类拥有的属性在向上代理前完成初始化。</li><li>安全检查 2：指定构造器必须在继承属性赋值前向上代理父类构造器，否则，便利构造器赋予的新值将被父类构造过程的一部分重写。</li><li>安全检查 3：便利构造器必须在 任何 属性(包括同一类中定义的属性)赋值前代理另一个构造器。否则便利构造器赋予的新值将被其所属类的指定构造器重写。</li><li>安全检查 4 构造器在第一阶段构造过程完成前，不能调用任何实例方法，不能读取任何实例属性的值，不能引用 self 作为一个值。</li></ol><p>以下是基于以上四个安全检查的两段式构造过程的流程:</p><p>阶段 1：</p><ol><li>在类中调用指定或便利构造器。</li><li>对一个新实例分配内存，但内存没还没有初始化。 指定构造器确认其所属类的所有存储属性都有值。现在那些存储属性的内存初始化完成。</li><li>指定构造器移交给父类构造器以为其存储属性执行相同的任务。 </li><li>这个过程沿着类的继承链持续向上，直到到达继承链的顶端。</li><li>一旦到达链的顶端，并且链中最后的类确保其所有存储属性都有值，则认为实例的内 存已经完全初始化，至此阶段 1 完成。</li></ol><p>阶段 2：</p><ol><li>从链顶端往下，链中每个指定构造器都可以选择进一步定制实例，构造器现在可以访 问 self 并修改它的属性，调用实例方法，等等。</li><li>最终，在链中的任何便利构造器也都可以选择定制实例以及使用 self 。</li></ol><h2 id="构造器的继承和重写"><a href="#构造器的继承和重写" class="headerlink" title="构造器的继承和重写"></a>构造器的继承和重写</h2><p>与 Objective-C 的派生类不同，Swift 的派生类默认不继承其父类构造器。Swift 这种机制防止了更定制化的派生类继承父类的简单构造器，也防止将简单构造器用于创建不完全初始化或是错误初始化的派生类实例。</p><p>当你在写一个与父类 指定 构造器相匹配的派生类构造器时，你是在有效的重写指定构造器。 因此，你必须在派生类构造器的定义前写上修饰符 override 。即使你重写的是一个自动提供的默认构造器，也要写上 override 。</p><p>相反的，如果你写一个与父类 便利 构造器相匹配的派生类构造器，根据 类的构造器代理 规 则，派生类是不能直接调用父类便利构造器的。因此，你的派生类(严格来说)没有重写父 类构造器。所以，在提供与父类便利构造器相匹配的实现时，无需编写 修饰<br>符 override </p><p>默认构造器(在可用时)总是类中的指定构造器。</p><p>派生类可在构造过程期间可修改变量继承属性，但不能修改常量继承属性。</p><h2 id="自动构造器的继承"><a href="#自动构造器的继承" class="headerlink" title="自动构造器的继承"></a>自动构造器的继承</h2><p>如上所述，派生类默认不继承其父类构造器。然而，如果满足某些特定条件，父类构造器 是 可以被自动继承的。实际上，这意味着很多常见场景中你不需要重写构造器，并且可以安全的以最小代价继承父类构造器。<br>假设你为派生类引入的所有属性提供了默认值，请应用以下两条规则以达到自动继承的目的:</p><ol><li>规则 1:如果你的派生类没有定义任何指定构造器，它会自动继承其父类的所有指定构造器。</li><li>规则 2:如果你的派生类为其父类的 所有 指定构造器都提供了实现 — 无论是按照规则 1 继承而来， 或是定义时提供了自定义实现 — 它都会自动继承父类的所有便利构造器。甚至在派生类进一步添加便利构造器时，这些规则仍然适用。</li></ol><h2 id="可失败构造器"><a href="#可失败构造器" class="headerlink" title="可失败构造器"></a>可失败构造器</h2><p>为了应对可能失败的构造过程，你可以为类，结构体，或是枚举定义一个或是多个可失败构 造器。编写可失败构造器的语法就是在 init 关键字后面添加问号( init? )。</p><blockquote><p>注意:你不能使用相同的参数类型或参数名定义一个可失败构造器后又定义一个非失败构造器。</p></blockquote><p>可失败构造器会创建一个关联值类型是自身构造类型的 可选 类型。在可失败构造器中编 写 return nil 以表示可以在任何情况下触发失败。</p><p>注意:严格来说，构造器没有返回值。它们的作用是确保构造过程结束时 self 可以完全并正确的初始化。虽然你写 return nil 是用于触发构造器失败，但表示构造成功是不会使用 return 关键字的。</p><h2 id="枚举的可失败构造器"><a href="#枚举的可失败构造器" class="headerlink" title="枚举的可失败构造器"></a>枚举的可失败构造器</h2><h2 id="带有原始值枚举的可失败构造器"><a href="#带有原始值枚举的可失败构造器" class="headerlink" title="带有原始值枚举的可失败构造器"></a>带有原始值枚举的可失败构造器</h2><h2 id="构造失败的传递"><a href="#构造失败的传递" class="headerlink" title="构造失败的传递"></a>构造失败的传递</h2><p>类、结构体或枚举的可失败构造器可以横向代理同一类型中的其他可失败构造器。类似的，派生类的可失败构造器可以向上代理其父类的可失败构造器。</p><blockquote><p>注意：一个可失败构造可以代理一个非失败构造器。如果你需要添加一个可能失败的状态到现有构造过程，请使用这个办法，否则将会构造失败。</p></blockquote><h2 id="重写可失败构造器"><a href="#重写可失败构造器" class="headerlink" title="重写可失败构造器"></a>重写可失败构造器</h2><p>你可以在派生来中重写父类的可失败构造器，就像其他构造器那样。或是你可以用派生类的 非失败 构造器重写父类的可失败构造器。这允许你定义一个不会构造失败的派生类，即使父 类的构造过程允许失败。</p><p>注意如果你使用非失败的派生类构造器重写了可失败的父类构造器，向上代理父类构造器的 唯一的方法就是强制解包(force-unwrap)可失败父类构造器的结果。</p><p>你可以使用非失败构造器重写可失败构造器，但是反过来不行。</p><h2 id="init-可失败构造器"><a href="#init-可失败构造器" class="headerlink" title="init! 可失败构造器"></a>init! 可失败构造器</h2><p>通常使用在关键字 init 后面放置问号( init? )的方式来定义一个可失败构造器， 用于创建一个适当的可选类型实例。你也可以定义一个可失败构造器，将其用于创建一个适 当的隐式解包可选类型的实例。为了定义这个可失败构造器，在关键字 init 后面用叹号 来替代问号( init! )。</p><h2 id="必要构造器"><a href="#必要构造器" class="headerlink" title="必要构造器"></a>必要构造器</h2><p>在类构造器的定义前写修饰符 required 以指明该类的每个派生类必须实现此构造器。</p><p>在每个派生类实现必要构造器时也必须在构造器前面写修饰符 required ，以指明构造 器要求应用于继承链中所有派生类。重写一个必要指定构造器时无需写修饰符 override 。</p><h2 id="使用闭包或函数设置默认属性值"><a href="#使用闭包或函数设置默认属性值" class="headerlink" title="使用闭包或函数设置默认属性值"></a>使用闭包或函数设置默认属性值</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SomeClass</span> &#123;</span><br><span class="line"><span class="keyword">let</span> someProperty: SomeType = &#123;</span><br><span class="line"><span class="comment">// 在闭包中创建⼀一个带有默认值的 someProperty // someValue 的类型必须是 SomeType</span></span><br><span class="line"><span class="keyword">return</span> someValue</span><br><span class="line">&#125;() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意那个闭包的结束是在大括号后面尾随一对空括号。这告诉 Swift 立即执行闭包。如果你 忽略了这对括号，则为试图将闭包本身赋值给属性，而不是闭包的返回值。</p><p>注意：如果你使用闭包初始化属性，记住在闭包执行时其他实例还未初始化。这意味着无法在闭包中访问其他属性值，即使那些属性有默认值。你也不能隐式使用 self 属性，或 是调用实例方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Setting Initial Values for Stored Properties&lt;/li&gt;
&lt;li&gt;Customizing Initialization&lt;/li&gt;
&lt;li&gt;Default Initializers&lt;/li&gt;
&lt;li&gt;Initializer Delegation for Value Types&lt;/li&gt;
&lt;li&gt;Class Inheritance and Initialization&lt;/li&gt;
&lt;li&gt;Failable Initializers&lt;/li&gt;
&lt;li&gt;Required Initializers&lt;/li&gt;
&lt;li&gt;Setting a Default Property Value with a Closure or Function&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="构造过程" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>16. 析构过程</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/16__%E6%9E%90%E6%9E%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/16__析构过程/</id>
    <published>2019-01-28T02:07:12.000Z</published>
    <updated>2019-01-28T08:50:32.765Z</updated>
    
    <content type="html"><![CDATA[<ol><li>ow Deinitialization Works</li><li>Deinitializers in Action</li></ol><a id="more"></a><p>析构器 会在类的实例销毁之前被立即调用。使用deinit关键字来表示析构器，类似于使用init关键字标示构造器，析构器仅适用于class类型。</p><h2 id="析构器是如何运作的"><a href="#析构器是如何运作的" class="headerlink" title="析构器是如何运作的"></a>析构器是如何运作的</h2><p>在类的定义中, 类最多只能有一个析构器。 析构器不接受任何参数，并且没有括号。</p><p>在实例销毁之前，会自动调用析构器。你不能自己调用析构器。父类的析构器由其子类继承，父类析构器会在子类析构器实现的末尾自动调用。即使子类不提供自己的析构器，父类析构器也会被调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;ow Deinitialization Works&lt;/li&gt;
&lt;li&gt;Deinitializers in Action&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>14. 继承</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/14__%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/14__继承/</id>
    <published>2019-01-28T01:07:12.000Z</published>
    <updated>2019-01-28T02:47:13.962Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Subscript Syntax</li><li>Subscript Usage</li><li>Subscript Options</li></ol><a id="more"></a><p>一个类可以 继承 另一个类的方法，属性以及其他特性。当一个类继承另一个类时，继承类称 为 子类，被继承类称为 父类。在 Swift 中，继承是类类型区别于其他类型的基本特性。</p><p>Swift 中的子类可以调用和访问父类的方法，属性和下标，还可以重写这些方法，属性和下标 来优化或修改它们的行为。Swift 会通过检查重写的定义和父类的定义是否匹配来帮助确保重 写是正确的。</p><p>子类还可以给继承的属性添加属性观察器，以便在属性值发生变化时得到通知。属性观察器<br>可以被添加到任何属性，不管它原始定义是储存属性还是计算属性。</p><h2 id="定义一个基类"><a href="#定义一个基类" class="headerlink" title="定义一个基类"></a>定义一个基类</h2><p>Swift 中的类并不继承自一个统一的类。定义类时如果不指定父类那么该类自动成为基类。</p><h2 id="子类化"><a href="#子类化" class="headerlink" title="子类化"></a>子类化</h2><p>子类化 是在已有类的基础上创建新类的行为。</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>一个子类可以对实例方法、类方法、实例属性、类属性和下标进行自定义实现，如果没有自定义，则会从超类继承，这就是所谓的重写。</p><p>重写从父类继承的特性，你需要在定义重写时添加 override 前缀。这表明你打算重写 一个特性并且没有使用错误的匹配定义。意外的重写会导致不可预料的行为，且任何没有使 用 override 关键词修饰的重写声明在编译代码时会被标记为错误。<br>override 关键词也提醒 Swift 编译器去检查你重写的这个类的超类(或它的某个父类) 是否有匹配重写版本的声明。这个检查确保你的重写定义是正确无误的。</p><h2 id="访问⽗父类的⽅方法、属性和下标"><a href="#访问⽗父类的⽅方法、属性和下标" class="headerlink" title="访问⽗父类的⽅方法、属性和下标"></a>访问⽗父类的⽅方法、属性和下标</h2><p>当你在子类中重写方法、属性或下标时，有时把父类的实现作为重写的一部分是很有用的。<br>例如，你可以优化现有的实现，或将修改后的值存储在现有的继承变量中。<br>在适当的情况下，应该用 super 前缀访问父类的方法、属性或下标:</p><ol><li>一个名为 someMethod() 的重写方法可以在实现中通过 super.someMethod() 来调用父类的 someMethod() 方法。</li><li>一个名为 someProperty 的属性可以在重写 getter 或 setter 的实现中通过 super.someProperty 访问父类的 someProperty 属性。</li><li>一个 someIndex 的重写下标可以在重写下标的实现中通过 super[someIndex] 访问父类的相同下标。</li></ol><h2 id="重写属性的-Getters-和-Setters"><a href="#重写属性的-Getters-和-Setters" class="headerlink" title="重写属性的 Getters 和 Setters"></a>重写属性的 Getters 和 Setters</h2><p>无论继承的属性原来是存储属性还是计算属性，都可以提供自定义的 getter(如果 setter 适 用，也包括 setter)来重写任何继承属性。子类不知道继承的属性是存储属性还是计算属 性，子类只知道继承的属性具有特定的名称和类型。你必须始终声明要重写的属性的名称和 类型，以使编译器能够检查你重写的属性是否与具有相同名称和类型的父类属性匹配。<br>通过在子类属性中重写 getter 和 setter，可以将继承的只读属性重写为读写属性，但是，你不能将继承的读写属性重写为只读属性。</p><blockquote><p>注意如果你重写属性的 setter 就必须同时重写属性的 getter。如果你不想在重写 getter 中修 改继承属性的值，你可以简单地在 getter 中返回 super.someProperty ，其中someProperty 是你想要重写的属性名称。</p></blockquote><h2 id="重写属性观察者"><a href="#重写属性观察者" class="headerlink" title="重写属性观察者"></a>重写属性观察者</h2><p>你可以用“属性重写特性”给一个继承属性增加属性观察者。 无论这个属性的初始值是多少，当它的值改变时你将会收到通知。更多有关属性观察者的信息，参阅 属性观察者.</p><blockquote><p>注意：你不能给常量存储属性或只读属性增加属性观察者。 因为这些属性值不能被修改，所以它是不能提供 willSet 或 didSet 的重写实现。<br>当然，你不能为同一个属性同时提供 setter 重写和 didSet 观察者。 如果你想观察这个属性值的改变，并且你已经为这个属性提供了一个重写的 setter 方法，那么你能在这个自定义 setter 方法里观察到它任何值的改变。</p></blockquote><h2 id="防⽌止重写"><a href="#防⽌止重写" class="headerlink" title="防⽌止重写"></a>防⽌止重写</h2><p>你可以通过标记方法、属性或下标为 final 来防止它被重写。通过在方法、属性或下标前添加 关键字 final (比如 final var 、 final func 、 final class func 和final subscript )来完成此操作</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Subscript Syntax&lt;/li&gt;
&lt;li&gt;Subscript Usage&lt;/li&gt;
&lt;li&gt;Subscript Options&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>1. 枚举</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/9__%E6%9E%9A%E4%B8%BE/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/9__枚举/</id>
    <published>2019-01-24T04:07:12.000Z</published>
    <updated>2019-01-25T10:52:37.023Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Enumeration Syntax</li><li>Matching Enumeration Values with a Switch Statement</li><li>Iterating over Enumeration Cases</li><li>Associated Values</li><li>Raw Values</li><li>Recursive Enumerations</li></ol><a id="more"></a><p><img src="/wiki/swift语言/swift学习摘要/9__枚举/1.jpeg" alt="1"></p><p><img src="/wiki/swift语言/swift学习摘要/9__枚举/2.jpeg" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Enumeration Syntax&lt;/li&gt;
&lt;li&gt;Matching Enumeration Values with a Switch Statement&lt;/li&gt;
&lt;li&gt;Iterating over Enumeration Cases&lt;/li&gt;
&lt;li&gt;Associated Values&lt;/li&gt;
&lt;li&gt;Raw Values&lt;/li&gt;
&lt;li&gt;Recursive Enumerations&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="枚举" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>10. 类和结构体</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/10__%E7%B1%BB%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/10__类和结构体/</id>
    <published>2019-01-24T04:07:12.000Z</published>
    <updated>2019-01-28T01:46:39.491Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Comparing Structures and Classes</li><li>Structures and Enumerations Are Value Types</li><li>Classes Are Reference Types</li></ol><a id="more"></a><p><img src="/wiki/swift语言/swift学习摘要/10__类和结构体/1.png" alt="1"></p><p><img src="/wiki/swift语言/swift学习摘要/10__类和结构体/2.png" alt="2"></p><p><img src="/wiki/swift语言/swift学习摘要/10__类和结构体/3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Comparing Structures and Classes&lt;/li&gt;
&lt;li&gt;Structures and Enumerations Are Value Types&lt;/li&gt;
&lt;li&gt;Classes Are Reference Types&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="类和结构体" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>2. 基础</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/2__%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/2__基础/</id>
    <published>2019-01-24T04:07:12.000Z</published>
    <updated>2019-01-28T01:47:30.358Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Constants and Variables</li><li>Comments</li><li>Semicolons</li><li>Integers</li><li>Floating-Point Numbers</li><li>Type Safety and Type Inference</li><li>Numeric Literals</li><li>Numeric Type Conversion</li><li>Type Aliases</li><li>Booleans</li><li>Tuples</li><li>Optionals</li><li>Error Handling</li><li>Assertions and Preconditions</li></ol><a id="more"></a><p><img src="/wiki/swift语言/swift学习摘要/2__基础/1.png" alt="1"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/2.png" alt="2"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/3.png" alt="3"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/4.png" alt="4"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/5.png" alt="5"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/6.png" alt="6"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/7.png" alt="7"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/8.png" alt="8"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/9.png" alt="9"></p><p><img src="/wiki/swift语言/swift学习摘要/2__基础/10.png" alt="10"></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Constants and Variables&lt;/li&gt;
&lt;li&gt;Comments&lt;/li&gt;
&lt;li&gt;Semicolons&lt;/li&gt;
&lt;li&gt;Integers&lt;/li&gt;
&lt;li&gt;Floating-Point Numbers&lt;/li&gt;
&lt;li&gt;Type Safety and Type Inference&lt;/li&gt;
&lt;li&gt;Numeric Literals&lt;/li&gt;
&lt;li&gt;Numeric Type Conversion&lt;/li&gt;
&lt;li&gt;Type Aliases&lt;/li&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Optionals&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Assertions and Preconditions&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>7. 函数</title>
    <link href="http://yoursite.com/wiki/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/7__%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/wiki/swift语言/swift学习摘要/7__函数/</id>
    <published>2019-01-24T04:07:12.000Z</published>
    <updated>2019-01-25T10:50:58.540Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Defining and Calling Functions</li><li>Function Parameters and Return Values</li><li>Function Argument Labels and Parameter Names</li><li>Function Types</li><li>Nested Functions</li></ol><a id="more"></a><p><img src="/wiki/swift语言/swift学习摘要/7__函数/1.jpeg" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Defining and Calling Functions&lt;/li&gt;
&lt;li&gt;Function Parameters and Return Values&lt;/li&gt;
&lt;li&gt;Function Argument Labels and Parameter Names&lt;/li&gt;
&lt;li&gt;Function Types&lt;/li&gt;
&lt;li&gt;Nested Functions&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift语言" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/"/>
    
      <category term="swift学习摘要" scheme="http://yoursite.com/categories/swift%E8%AF%AD%E8%A8%80/swift%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81/"/>
    
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
